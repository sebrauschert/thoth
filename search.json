[{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to thoth","title":"Contributing to thoth","text":"outlines propose change thoth. detailed info contributing , e.g. tidyverse packages, please see development contributing guide.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to thoth","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to thoth","text":"making significant changes, please make sure : R (>= 4.1.0) DVC Docker Quarto","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to thoth","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to thoth","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"sebrauschert/thoth\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to thoth","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to thoth","text":"Please note thoth project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RNA-seq Analysis Example","text":"vignette demonstrates use thoth typical RNA-seq analysis workflow using edgeR limma. ’ll walk : Setting reproducible project structure Tracking raw count data DVC Performing quality control documented decisions Running differential expression analysis Creating publication-ready visualizations Building reproducible pipeline","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"RNA-seq Analysis Example","text":"First, let’s create new project reproducibility features enabled:","code":"# Load required packages library(thoth) library(tidyverse) library(edgeR) library(limma) library(statmod)  # Required for edgeR library(ComplexHeatmap)  # Create new project with reproducibility features create_analytics_project(   \"rnaseq_analysis\",   use_dvc = TRUE,      # Enable data version control   use_docker = TRUE,   # Enable containerization   git_init = TRUE      # Initialize Git repository )  # Change to project directory setwd(\"rnaseq_analysis\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"generate-example-dataset","dir":"Articles","previous_headings":"Data Management","what":"Generate Example Dataset","title":"RNA-seq Analysis Example","text":"example, ’ll create simulated RNA-seq dataset:","code":"# Set random seed for reproducibility set.seed(42)  # Simulation parameters n_genes <- 10000 n_samples <- 8  # Create counts matrix with negative binomial distribution counts <- matrix(   rnbinom(n_genes * n_samples, mu = 100, size = 1),   nrow = n_genes,   ncol = n_samples )  # Add informative row and column names rownames(counts) <- paste0(\"gene_\", 1:n_genes) colnames(counts) <- paste0(\"sample_\", 1:n_samples)  # Create sample metadata with treatment and batch information sample_info <- data.frame(   sample = colnames(counts),   group = rep(c(\"control\", \"treatment\"), each = 4),   batch = rep(c(\"A\", \"B\"), 4) )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"track-raw-data-with-dvc","dir":"Articles","previous_headings":"Data Management","what":"Track Raw Data with DVC","title":"RNA-seq Analysis Example","text":"Save version raw data:","code":"# Save and track count matrix counts |>   as.data.frame() |>   rownames_to_column(\"gene_id\") |>   write_csv_dvc(     \"data/raw/counts.csv\",     message = \"Add raw RNA-seq count data\",     stage_name = \"save_raw_data\"   )  # Save and track sample metadata sample_info |>   write_csv_dvc(     \"data/raw/sample_info.csv\",     message = \"Add sample metadata\",     stage_name = \"save_metadata\"   )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"initialize-decision-tree","dir":"Articles","previous_headings":"Analysis Setup","what":"Initialize Decision Tree","title":"RNA-seq Analysis Example","text":"Create structured way track analytical decisions:","code":"# Initialize decision tracking decision_file <- initialize_decision_tree(   analysis_id = \"rnaseq_2024\",   analyst = \"Data Scientist\",   description = \"Differential expression analysis comparing treatment vs control\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"create-dgelist-object","dir":"Articles","previous_headings":"Analysis Setup","what":"Create DGEList Object","title":"RNA-seq Analysis Example","text":"Set edgeR analysis object:","code":"# Read data using tracked files counts_df <- read_csv(\"data/raw/counts.csv\") sample_info <- read_csv(\"data/raw/sample_info.csv\")  # Create DGEList object dge <- DGEList(   counts = counts_df |> column_to_rownames(\"gene_id\"),   group = sample_info$group )  # Add batch information for later use dge$samples$batch <- sample_info$batch  # Record initial data structure record_decision(   decision_file,   check = \"Data import\",   observation = sprintf(     \"Dataset contains %d genes across %d samples\",     nrow(dge), ncol(dge)   ),   decision = \"Proceed with analysis\",   reasoning = \"Data structure matches experimental design\",   evidence = NULL )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"expression-filtering","dir":"Articles","previous_headings":"Quality Control","what":"1. Expression Filtering","title":"RNA-seq Analysis Example","text":"Remove lowly expressed genes:","code":"# Calculate library sizes and CPM lib_sizes <- dge$samples$lib.size cpms <- cpm(dge)  # Create expression density plot png(\"plots/gene_expression_density.png\", width = 800, height = 600) plot(density(log2(cpms[cpms > 0])),       main = \"Gene Expression Distribution\",      xlab = \"log2 CPM\") dev.off()  # Filter low expression genes keep <- filterByExpr(dge, group = dge$samples$group) dge_filtered <- dge[keep, ]  # Record filtering decision record_decision(   decision_file,   check = \"Gene filtering\",   observation = sprintf(     \"Removed %d genes (%d%%) with consistently low counts\",     sum(!keep), round(100 * sum(!keep) / length(keep))   ),   decision = \"Filter using filterByExpr()\",   reasoning = \"Remove noise from lowly expressed genes\",   evidence = \"plots/gene_expression_density.png\" )  # Save filtered data with DVC dge_filtered$counts |>   as.data.frame() |>   rownames_to_column(\"gene_id\") |>   write_csv_dvc(     \"data/processed/filtered_counts.csv\",     message = \"Add filtered count data\",     stage_name = \"filter_genes\",     deps = c(       \"data/raw/counts.csv\",       \"data/raw/sample_info.csv\"     ),     params = list(       min_cpm = 1,       min_samples = 4     )   )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"normalization","dir":"Articles","previous_headings":"Quality Control","what":"2. Normalization","title":"RNA-seq Analysis Example","text":"Apply TMM normalization account composition bias:","code":"# Calculate normalization factors dge_filtered <- calcNormFactors(dge_filtered)  # Record normalization decision record_decision(   decision_file,   check = \"Normalization\",   observation = sprintf(     \"Library sizes range from %s to %s million reads\",     format(min(lib_sizes) / 1e6, digits = 2),     format(max(lib_sizes) / 1e6, digits = 2)   ),   decision = \"Apply TMM normalization\",   reasoning = \"Account for composition bias between samples\",   evidence = NULL )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"sample-quality-assessment","dir":"Articles","previous_headings":"Quality Control","what":"3. Sample Quality Assessment","title":"RNA-seq Analysis Example","text":"Visualize sample relationships:","code":"# Create MDS plot png(\"plots/mds_plot.png\", width = 800, height = 600) limma::plotMDS(dge_filtered,                col = as.numeric(factor(dge_filtered$samples$group)),                pch = as.numeric(factor(dge_filtered$samples$batch))) legend(\"topright\",        legend = c(levels(factor(dge_filtered$samples$group)),                  levels(factor(dge_filtered$samples$batch))),        col = c(1:2, rep(\"black\", 2)),        pch = c(1, 1, 1:2)) dev.off()  # Record clustering observation record_decision(   decision_file,   check = \"Sample clustering\",   observation = \"Samples cluster primarily by treatment with visible batch effects\",   decision = \"Include batch in design matrix\",   reasoning = \"Account for technical variation while testing treatment effect\",   evidence = \"plots/mds_plot.png\" )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"model-fitting","dir":"Articles","previous_headings":"Differential Expression Analysis","what":"1. Model Fitting","title":"RNA-seq Analysis Example","text":"Fit linear model accounting batch effects:","code":"# Create design matrix with batch effect design <- model.matrix(   ~batch + group,   data = dge_filtered$samples )  # Apply voom transformation and fit model v <- voom(dge_filtered, design, plot = TRUE) png(\"plots/voom_plot.png\", width = 800, height = 600) v <- voom(dge_filtered, design, plot = TRUE) dev.off()  # Fit linear model fit <- lmFit(v, design) fit <- eBayes(fit)  # Get results table results <- topTable(   fit,   coef = \"grouptreatment\",   number = Inf ) |>   rownames_to_column(\"gene_id\")  # Save results with DVC results |>   write_csv_dvc(     \"data/processed/de_results.csv\",     message = \"Add differential expression results\",     stage_name = \"de_analysis\",     deps = \"data/processed/filtered_counts.csv\",     params = list(       adj_p_threshold = 0.05,       lfc_threshold = 1     ),     metrics = TRUE  # Track as DVC metrics   )  # Record analysis decisions record_decision(   decision_file,   check = \"Differential expression\",   observation = sprintf(     \"Found %d DE genes (FDR < 0.05, |logFC| > 1)\",     sum(results$adj.P.Val < 0.05 & abs(results$logFC) > 1)   ),   decision = \"Use voom-limma pipeline with batch correction\",   reasoning = \"Account for mean-variance relationship and batch effects\",   evidence = c(\"plots/voom_plot.png\", \"data/processed/de_results.csv\") )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"visualization","dir":"Articles","previous_headings":"Differential Expression Analysis","what":"2. Visualization","title":"RNA-seq Analysis Example","text":"Create publication-ready figures:","code":"# Create volcano plot results |>   ggplot(aes(x = logFC, y = -log10(adj.P.Val))) +   geom_point(     aes(color = adj.P.Val < 0.05 & abs(logFC) > 1),     alpha = 0.6   ) +   scale_color_manual(     values = c(\"grey\", \"red\"),     labels = c(\"Non-significant\", \"DE genes\")   ) +   theme_minimal() +   labs(     title = \"Differential Expression Analysis\",     x = \"log2 Fold Change\",     y = \"-log10 Adjusted P-value\",     color = \"Significance\"   ) |>   ggsave(     \"plots/volcano_plot.png\",     width = 10,     height = 8   )  # Create heatmap of top DE genes top_genes <- results |>   filter(adj.P.Val < 0.05, abs(logFC) > 1) |>   slice_head(n = 50) |>   pull(gene_id)  # Get normalized expression for top genes expr_mat <- v$E[top_genes, ]  # Save heatmap png(\"plots/heatmap.png\", width = 800, height = 1000) Heatmap(   expr_mat,   name = \"Expression\",   column_split = dge_filtered$samples$group,   show_row_names = FALSE,   column_title = \"Top 50 DE Genes\" ) dev.off()"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"export-analysis-documentation","dir":"Articles","previous_headings":"","what":"Export Analysis Documentation","title":"RNA-seq Analysis Example","text":"Generate comprehensive documentation:","code":"# Export decision tree export_decision_tree(   decision_file,   format = \"html\",   output_path = \"reports/analysis_decisions.html\" )  # Generate methods section methods_text <- generate_methods_section(decision_file) writeLines(methods_text, \"reports/methods_section.md\")"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"complete-dvc-pipeline","dir":"Articles","previous_headings":"","what":"Complete DVC Pipeline","title":"RNA-seq Analysis Example","text":"analysis now fully tracked reproducible:","code":"# Check pipeline status dvc_status()  # Reproduce entire analysis dvc_repro()  # Push to remote storage dvc_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"RNA-seq Analysis Example","text":"example demonstrates : - Track RNA-seq data DVC - Document QC analysis decisions - Create reproducible bioinformatics pipelines - Generate publication-ready figures - Share results methods entire analysis version controlled reproducible, : - Raw data tracked DVC - Code Git - Dependencies managed renv - Analysis decisions documented - Docker environment reproducibility","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"RNA-seq Analysis Example","text":"Adapt workflow RNA-seq data Explore advanced features vignette(\"dvc-tracking\") Learn custom templates vignette(\"custom-templates\") Check Git integration vignette(\"git-integration\")","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Custom Templates with thoth","text":"thoth provides tools create manage custom Quarto templates maintain consistent branding styling across organization’s reports. templates can easily created, customized, applied Quarto document.","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"basic-template","dir":"Articles","previous_headings":"Creating Templates","what":"Basic Template","title":"Custom Templates with thoth","text":"Create new template organization’s branding:","code":"library(thoth)  create_quarto_template(   template_name = \"company_template\",   primary_color = \"#0054AD\",   secondary_color = \"#00B4E0\",   font_family = \"Source Sans Pro\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"template-structure","dir":"Articles","previous_headings":"Creating Templates","what":"Template Structure","title":"Custom Templates with thoth","text":"template generator creates complete set files:","code":"reports/ └── templates/     └── company_template/         ├── _template.yml     # Quarto configuration         ├── custom.css       # Styling         └── assets/         # Images and resources"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"yaml-configuration","dir":"Articles","previous_headings":"Template Components","what":"1. YAML Configuration","title":"Custom Templates with thoth","text":"","code":"format:   html:     theme: cosmo     css: custom.css     toc: true     code-fold: true     code-tools: true     fig-width: 8     fig-height: 6     fig-dpi: 300"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"css-styling","dir":"Articles","previous_headings":"Template Components","what":"2. CSS Styling","title":"Custom Templates with thoth","text":"","code":":root {   --primary-color: #0054AD;   --secondary-color: #00B4E0; }  .navbar {   background-color: var(--primary-color); }  .title {   color: var(--primary-color); }  body {   font-family: 'Source Sans Pro', sans-serif; }"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"applying-to-reports","dir":"Articles","previous_headings":"Using Templates","what":"Applying to Reports","title":"Custom Templates with thoth","text":"","code":"# Apply template to a single report apply_template_to_report(   \"reports/analysis.qmd\",   \"company_template\" )  # Apply to multiple reports apply_template_to_report(   c(\"reports/analysis.qmd\", \"reports/summary.qmd\"),   \"company_template\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"customizing-templates","dir":"Articles","previous_headings":"Using Templates","what":"Customizing Templates","title":"Custom Templates with thoth","text":"","code":"# Create template with custom settings create_quarto_template(   template_name = \"technical_report\",   primary_color = \"#2E5EAA\",   secondary_color = \"#30B8BE\",   font_family = \"JetBrains Mono\",   code_font = \"Fira Code\",   toc_depth = 3,   code_fold = \"show\" )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"design-principles","dir":"Articles","previous_headings":"Best Practices","what":"1. Design Principles","title":"Custom Templates with thoth","text":"Use consistent color schemes Choose readable fonts Maintain clear hierarchy Ensure accessibility","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"organization","dir":"Articles","previous_headings":"Best Practices","what":"2. Organization","title":"Custom Templates with thoth","text":"Keep templates version control Document customizations Use meaningful template names Share templates across team","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"usage","dir":"Articles","previous_headings":"Best Practices","what":"3. Usage","title":"Custom Templates with thoth","text":"","code":"# Create project with template create_analytics_project(   \"analysis\",   use_quarto = TRUE,   template = \"company_template\" )  # Apply template to existing report apply_template_to_report(   \"report.qmd\",   \"company_template\",   overwrite = FALSE  # Preview changes first )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"executive-summary","dir":"Articles","previous_headings":"Template Types","what":"1. Executive Summary","title":"Custom Templates with thoth","text":"","code":"format:   html:     toc: false     code-fold: true     code-tools: false     fig-width: 10"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"technical-report","dir":"Articles","previous_headings":"Template Types","what":"2. Technical Report","title":"Custom Templates with thoth","text":"","code":"format:   html:     toc: true     toc-depth: 3     code-fold: show     code-tools: true     df-print: paged"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Custom Templates with thoth","text":"Try end--end example: vignette(\"end--end-example\") Learn Docker setup: vignette(\"docker-setup\") Check Quarto documentation advanced features","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Decision Tracking with thoth","text":"thoth provides structured way document track human decisions made data analysis. code data can version controlled, reasoning behind analytical choices often remains undocumented. decision tracking functionality helps make choices explicit traceable.","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"initialize-tracking","dir":"Articles","previous_headings":"Core Functions","what":"Initialize Tracking","title":"Decision Tracking with thoth","text":"Start tracking decisions analysis:","code":"library(thoth)  # Create a new decision tree tree <- initialize_decision_tree(   analysis_id = \"RNA_seq_2024\",   analyst = \"Jane Smith\",   description = \"Differential expression analysis\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"record-decisions","dir":"Articles","previous_headings":"Core Functions","what":"Record Decisions","title":"Decision Tracking with thoth","text":"Document key analytical choices make :","code":"# Quality control decision record_decision(   file_path = tree,   check = \"Sample QC\",   observation = \"Sample T3 clusters with controls in PCA\",   decision = \"Remove sample T3\",   reasoning = \"Likely sample swap or contamination\",   evidence = \"plots/pca_plot.pdf\" )  # Analysis parameter decision record_decision(   file_path = tree,   check = \"Differential Expression\",   observation = \"High biological variability in controls\",   decision = \"Use DESeq2 with LRT test\",   reasoning = \"Better handles overdispersion\",   evidence = \"tables/variance_analysis.csv\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"generate-documentation","dir":"Articles","previous_headings":"Core Functions","what":"Generate Documentation","title":"Decision Tracking with thoth","text":"Automatically create documentation decisions:","code":"# Generate methods section methods_text <- generate_methods_section(tree)  # Export decision tree export_decision_tree(tree, format = \"md\")    # Markdown export_decision_tree(tree, format = \"html\")   # HTML report"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"recording-decisions","dir":"Articles","previous_headings":"Best Practices","what":"1. Recording Decisions","title":"Decision Tracking with thoth","text":"Document decisions happen Include clear observations reasoning Link supporting evidence Use consistent terminology","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"organization","dir":"Articles","previous_headings":"Best Practices","what":"2. Organization","title":"Decision Tracking with thoth","text":"One decision tree per analysis Keep trees version control Review decisions team members Update analysis evolves","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"documentation","dir":"Articles","previous_headings":"Best Practices","what":"3. Documentation","title":"Decision Tracking with thoth","text":"","code":"# Example workflow tree <- initialize_decision_tree(   analysis_id = \"project_2024\",   description = \"Analysis workflow\" )  # Record initial choices record_decision(   file_path = tree,   check = \"Data Processing\",   observation = \"Raw data contains outliers\",   decision = \"Apply robust normalization\",   reasoning = \"Reduce impact of extreme values\",   evidence = \"scripts/normalize.R\" )  # Generate documentation methods <- generate_methods_section(tree)"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"quality-control-decisions","dir":"Articles","previous_headings":"Common Patterns","what":"Quality Control Decisions","title":"Decision Tracking with thoth","text":"","code":"# Document QC steps record_decision(   file_path = tree,   check = \"Data Quality\",   observation = \"10% missing values in variable X\",   decision = \"Impute using KNN\",   reasoning = \"Data appears MCAR\",   evidence = \"reports/missing_analysis.html\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"parameter-selection","dir":"Articles","previous_headings":"Common Patterns","what":"Parameter Selection","title":"Decision Tracking with thoth","text":"","code":"# Document parameter choices record_decision(   file_path = tree,   check = \"Model Parameters\",   observation = \"Cross-validation shows overfitting\",   decision = \"Increase regularization to 0.1\",   reasoning = \"Reduces test error by 15%\",   evidence = \"plots/cv_results.pdf\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Decision Tracking with thoth","text":"Try end--end example: vignette(\"end--end-example\") Learn Git integration: vignette(\"git-integration\") Check DVC tracking: vignette(\"dvc-tracking\")","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Docker Setup with thoth","text":"thoth simplifies containerization automatically creating Docker environment matches local R setup. ensures analysis can reproduced exactly intended, regardless runs.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"automatic-setup","dir":"Articles","previous_headings":"","what":"Automatic Setup","title":"Docker Setup with thoth","text":"creating new project, thoth handles Docker configuration automatically: creates two key files:","code":"library(thoth)  create_analytics_project(   \"my_analysis\",   use_docker = TRUE )"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"dockerfile","dir":"Articles","previous_headings":"Automatic Setup","what":"1. Dockerfile","title":"Docker Setup with thoth","text":"","code":"FROM rocker/rstudio:${R_VERSION}  # System dependencies RUN apt-get update && apt-get install -y \\     python3-pip \\     && rm -rf /var/lib/apt/lists/*  # Install DVC RUN pip3 install dvc  # Project setup WORKDIR /project COPY . /project/  # R package installation RUN R -e 'install.packages(\"renv\")' RUN R -e 'renv::restore()'  # Set permissions RUN chown -R rstudio:rstudio /project  CMD [\"/init\"]"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"docker-compose-yml","dir":"Articles","previous_headings":"Automatic Setup","what":"2. docker-compose.yml","title":"Docker Setup with thoth","text":"","code":"services:   rstudio:     build: .     ports:       - \"8787:8787\"     environment:       - PASSWORD=rstudio       - ROOT=TRUE     volumes:       - .:/project     user: rstudio"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"starting-rstudio-server","dir":"Articles","previous_headings":"Using the Environment","what":"Starting RStudio Server","title":"Docker Setup with thoth","text":"","code":"# Start the container docker-compose up -d  # Access RStudio at http://localhost:8787 # Username: rstudio # Password: rstudio  # Stop the container docker-compose down"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"version-matching","dir":"Articles","previous_headings":"Key Features","what":"1. Version Matching","title":"Docker Setup with thoth","text":"Uses exactly R version local installation Ensures perfect reproducibility across environments Automatically handles system dependencies","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"development-integration","dir":"Articles","previous_headings":"Key Features","what":"2. Development Integration","title":"Docker Setup with thoth","text":"Mounts project directory Real-time file synchronization Preserves Git DVC functionality","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"package-management","dir":"Articles","previous_headings":"Key Features","what":"3. Package Management","title":"Docker Setup with thoth","text":"Integrates renv dependency tracking Automatically installs required packages Maintains consistent package versions","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"project-organization","dir":"Articles","previous_headings":"Best Practices","what":"Project Organization","title":"Docker Setup with thoth","text":"Keep Docker files version control Document customizations Include Docker instructions README","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"development-workflow","dir":"Articles","previous_headings":"Best Practices","what":"Development Workflow","title":"Docker Setup with thoth","text":"","code":"# 1. Create project with Docker create_analytics_project(\"analysis\", use_docker = TRUE)  # 2. Start container system(\"docker-compose up -d\")  # 3. Develop in RStudio Server # Access at http://localhost:8787  # 4. Track dependencies automatically # renv and Docker handle the rest"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"sharing","dir":"Articles","previous_headings":"Best Practices","what":"Sharing","title":"Docker Setup with thoth","text":"","code":"# Recipients only need to: git clone <repository> cd <repository> docker-compose up -d"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"customization","dir":"Articles","previous_headings":"","what":"Customization","title":"Docker Setup with thoth","text":"can customize Docker setup modifying: Dockerfile: Add tools system dependencies docker-compose.yml: Adjust container settings","code":"# Add custom system packages RUN apt-get update && apt-get install -y \\     your-package-here  # Add R packages RUN R -e 'install.packages(\"your-package\")' services:   rstudio:     ports:       - \"custom-port:8787\"     environment:       - CUSTOM_VAR=value"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Docker Setup with thoth","text":"Try end--end example: vignette(\"end--end-example\") Learn DVC integration: vignette(\"dvc-tracking\") Check Docker documentation advanced features","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Version Control with thoth","text":"Data Version Control (DVC) essential managing data science workflows, particularly dealing large files shouldn’t stored Git. thoth provides seamless integration R DVC, offering tidyverse-style functions make data versioning intuitive R users.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Data Version Control with thoth","text":"using DVC functionality thoth, ensure : DVC installed (visit DVC Installation Guide) Git initialized project thoth package installed can verify setup using:","code":"library(thoth) check_system_requirements()"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"basic-data-tracking","dir":"Articles","previous_headings":"Core DVC Functions","what":"Basic Data Tracking","title":"Data Version Control with thoth","text":"Track data files R objects simple, pipe-friendly functions:","code":"# Track CSV files processed_data |>    write_csv_dvc(     \"data/processed/results.csv\",     message = \"Added processed analysis results\"   )  # Track R objects model |>    write_rds_dvc(     \"models/final_model.rds\",     message = \"Saved trained model\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"pipeline-management","dir":"Articles","previous_headings":"Core DVC Functions","what":"Pipeline Management","title":"Data Version Control with thoth","text":"Create reproducible pipelines tracking dependencies, outputs, parameters:","code":"# Data preprocessing stage raw_data |>    write_csv_dvc(     \"data/processed/clean_data.csv\",     stage_name = \"preprocess\",     deps = \"data/raw/input.csv\",     params = list(       remove_na = TRUE,       normalize = TRUE     )   )  # Model training stage model |>    write_rds_dvc(     \"models/model.rds\",     stage_name = \"train\",     deps = \"data/processed/clean_data.csv\",     params = list(       n_trees = 500,       learning_rate = 0.01     )   )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"metrics-and-plots","dir":"Articles","previous_headings":"Core DVC Functions","what":"Metrics and Plots","title":"Data Version Control with thoth","text":"Track model performance metrics visualizations:","code":"# Track evaluation metrics metrics |>    write_csv_dvc(     \"metrics/evaluation.csv\",     stage_name = \"evaluate\",     deps = c(\"models/model.rds\", \"data/test.csv\"),     metrics = TRUE   )  # Track visualization data plot_data |>    write_csv_dvc(     \"plots/performance.csv\",     stage_name = \"visualize\",     deps = \"metrics/evaluation.csv\",     plots = TRUE   )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Data Version Control with thoth","text":"Keep raw data data/raw/ Store processed data data/processed/ Save models models/ Track metrics metrics/ Store plots plots/ Include descriptive commit messages Document parameter choices Note important data transformations Create modular pipeline stages Track dependencies explicitly Version control parameters Include evaluation metrics","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"pulling-and-pushing-data","dir":"Articles","previous_headings":"Common Operations","what":"Pulling and Pushing Data","title":"Data Version Control with thoth","text":"","code":"# Pull data from remote storage dvc_pull()  # Push data to remote storage dvc_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"managing-stages","dir":"Articles","previous_headings":"Common Operations","what":"Managing Stages","title":"Data Version Control with thoth","text":"","code":"# Add a new stage dvc_stage(   name = \"feature_engineering\",   deps = \"data/processed/clean_data.csv\",   outputs = \"data/processed/features.csv\",   params = list(n_features = 10) )  # Commit changes dvc_commit()"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Data Version Control with thoth","text":"Explore DVC documentation advanced features Check end--end example: vignette(\"end--end-example\") Learn Git integration: vignette(\"git-integration\")","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"End-to-End Example: Iris Classification Project","text":"guide walks complete data science project using thoth. ’ll use classic iris dataset demonstrate package’s features work together. end, ’ll understand : Set reproducible project structure Track data code changes Document analytical decisions Create reproducible workflows Share work others","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"1. Project Setup","title":"End-to-End Example: Iris Classification Project","text":"Let’s start creating new project necessary components: creates structured project : - Version control (Git) code - Data version control (DVC) large files - Docker reproducible environments - Organized directories data, code, results","code":"# Load required packages library(thoth) library(tidyverse) library(tidymodels)  # Create a new project with all features enabled create_analytics_project(   \"iris_analysis\",      # Project name   use_dvc = TRUE,       # Enable data version control   use_docker = TRUE,    # Enable containerization   git_init = TRUE       # Initialize Git repository )  # Move into the project directory setwd(\"iris_analysis\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"save-raw-data","dir":"Articles","previous_headings":"2. Data Management","what":"2.1 Save Raw Data","title":"End-to-End Example: Iris Classification Project","text":"First, let’s save track raw data:","code":"# Save the iris dataset as our raw data # The write_csv_dvc function combines saving and tracking in one step iris %>%    as_tibble() %>%   write_csv_dvc(     \"data/raw/iris.csv\",     message = \"Add original iris dataset\",  # Descriptive message for tracking     stage_name = \"save_raw_data\"           # Name this step in our pipeline   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"process-data","dir":"Articles","previous_headings":"2. Data Management","what":"2.2 Process Data","title":"End-to-End Example: Iris Classification Project","text":"Now ’ll clean prepare data analysis:","code":"# Read the raw data and process it processed_data <- read_csv(\"data/raw/iris.csv\") %>%   # Clean column names (e.g., Sepal.Length -> sepal_length)   janitor::clean_names() %>%   # Convert species to a factor (categorical) variable   mutate(     species = as.factor(species),     # Scale numeric features to have mean=0 and sd=1     across(where(is.numeric), scale)   )  # Create training (80%) and testing (20%) sets set.seed(123)  # For reproducibility split <- initial_split(processed_data, prop = 0.8) train_data <- training(split) test_data <- testing(split)  # Save and track the processed datasets train_data %>%   write_csv_dvc(     \"data/processed/train.csv\",     message = \"Add processed training data\",     stage_name = \"prepare_data\",           # Name this pipeline stage     deps = \"data/raw/iris.csv\",           # Declare dependencies     params = list(                        # Track important parameters       train_prop = 0.8,       seed = 123     )   )  test_data %>%   write_csv_dvc(     \"data/processed/test.csv\",     message = \"Add processed test data\"   )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"train-model","dir":"Articles","previous_headings":"3. Model Development","what":"3.1 Train Model","title":"End-to-End Example: Iris Classification Project","text":"Let’s train random forest classifier:","code":"# Define the model specification rf_spec <- rand_forest(   trees = 500,    # Number of trees   mtry = 3        # Number of variables to consider at each split ) %>%   set_engine(\"ranger\") %>%           # Use ranger implementation   set_mode(\"classification\")         # Set for classification task  # Train the model rf_fit <- rf_spec %>%   fit(     species ~ .,    # Predict species using all other variables     data = train_data   )  # Save and track the trained model rf_fit %>%   write_rds_dvc(     \"models/rf_model.rds\",     message = \"Save trained random forest model\",     stage_name = \"train_model\",     deps = \"data/processed/train.csv\",    # Model depends on training data     params = list(                        # Track model parameters       n_trees = 500,       mtry = 3     )   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"evaluate-model","dir":"Articles","previous_headings":"3. Model Development","what":"3.2 Evaluate Model","title":"End-to-End Example: Iris Classification Project","text":"Let’s assess well model performs:","code":"# Make predictions on test data predictions <- rf_fit %>%   predict(test_data) %>%   bind_cols(test_data)  # Calculate performance metrics metrics <- predictions %>%   metrics(truth = species, estimate = .pred_class)  # Create visualization conf_matrix_plot <- predictions %>%   conf_mat(truth = species, estimate = .pred_class) %>%   autoplot()  # Save confusion matrix plot ggsave(   \"plots/confusion_matrix.png\",   plot = conf_matrix_plot,   width = 8,   height = 6 )  # Track metrics with DVC metrics %>%   write_csv_dvc(     \"metrics/model_metrics.csv\",     message = \"Add model evaluation metrics\",     stage_name = \"evaluate_model\",     deps = c(                              # This stage depends on:       \"models/rf_model.rds\",              # - The trained model       \"data/processed/test.csv\"           # - The test data     ),     metrics = TRUE                        # Mark as metrics for tracking   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"decision-tracking","dir":"Articles","previous_headings":"","what":"4. Decision Tracking","title":"End-to-End Example: Iris Classification Project","text":"Let’s document analytical decisions:","code":"# Start tracking decisions tree <- initialize_decision_tree(   analysis_id = \"iris_classification\",   analyst = \"Data Scientist\",   description = \"Classification of iris species using random forest\" )  # Record data processing decisions record_decision(   tree,   check = \"Feature scaling\",   observation = \"Features are on different scales (e.g., length vs width)\",   decision = \"Scale all numeric features to mean=0, sd=1\",   reasoning = \"Standardized features ensure equal importance in the model\",   evidence = \"data/processed/train.csv\" )  record_decision(   tree,   check = \"Train/Test Split\",   observation = \"Need to assess model performance on unseen data\",   decision = \"Use 80/20 split with random sampling\",   reasoning = \"Standard split ratio, enough data in both sets\",   evidence = \"scripts/prepare_data.R\" )  # Record modeling decisions record_decision(   tree,   check = \"Model Selection\",   observation = \"Relationships between features may be non-linear\",   decision = \"Use random forest classifier\",   reasoning = \"Can capture complex patterns, handles feature interactions well\",   evidence = \"models/rf_model.rds\" )  # Export decisions for documentation export_decision_tree(   tree,   format = \"html\",   output_path = \"reports/analysis_decisions.html\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"reproducible-pipeline","dir":"Articles","previous_headings":"","what":"5. Reproducible Pipeline","title":"End-to-End Example: Iris Classification Project","text":"complete analysis pipeline now includes: 1. Raw data saving 2. Data preprocessing 3. Model training 4. Model evaluation 5. Decision documentation reproduce entire analysis:","code":"# Reproduce all pipeline stages dvc_repro()  # Check pipeline status dvc_status()"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"share-code","dir":"Articles","previous_headings":"6. Sharing Your Work","what":"6.1 Share Code","title":"End-to-End Example: Iris Classification Project","text":"Push code remote repository:","code":"# Stage all changes git_add(\".\")  # Commit changes git_commit(\"Complete iris species classification analysis\")  # Push to remote repository git_push(\"origin\", \"main\")"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"share-data-and-models","dir":"Articles","previous_headings":"6. Sharing Your Work","what":"6.2 Share Data and Models","title":"End-to-End Example: Iris Classification Project","text":"Push data models DVC remote:","code":"# Push all tracked data and models dvc_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"share-environment","dir":"Articles","previous_headings":"6. Sharing Your Work","what":"6.3 Share Environment","title":"End-to-End Example: Iris Classification Project","text":"Others can reproduce environment using steps: Note: Docker setup, use functions Docker integration:","code":"# 1. Clone the repository (one-time setup) git_clone(\"<repository-url>\", \"iris_analysis\")  # 2. Change to project directory setwd(\"iris_analysis\")  # 3. Pull the latest code git_pull()  # 4. Pull data and models dvc_pull()  # 5. Reproduce the analysis dvc_repro() # Start the Docker environment setup_docker()"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"End-to-End Example: Iris Classification Project","text":"Try adapting workflow data Explore advanced features vignette(\"dvc-tracking\") Learn custom templates vignette(\"custom-templates\")","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with thoth","text":"thoth R package designed streamline setup management reproducible analytics projects. provides integrated framework combines modern data science tools best practices, making easier create maintain professional analytical workflows. package offers seamless integration essential tools like Data Version Control (DVC), Docker containerization, Quarto reporting, maintaining tidyverse-friendly syntax R users familiar .","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with thoth","text":"can install development version thoth GitHub: package requires several system dependencies unlock full potential: R (>= 4.1.0) DVC data version control Docker containerization Quarto report generation git version control can check system meets requirements using:","code":"# install.packages(\"devtools\") devtools::install_github(\"sebrauschert/thoth\") library(thoth) check_system_requirements()"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"Getting Started with thoth","text":"Creating new analytics project thoth straightforward: command sets standardized project structure integrated version control, data tracking, reporting capabilities. created project includes: standardized directory structure data, code, documentation Git initialization appropriate .gitignore settings DVC configuration data version control Docker setup reproducible environments Quarto integration professional reporting comprehensive README file","code":"create_analytics_project(   \"my_project\",   use_dvc = TRUE,   use_docker = TRUE,   use_quarto = TRUE )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"data-version-control","dir":"Articles","previous_headings":"Core Features","what":"Data Version Control","title":"Getting Started with thoth","text":"thoth provides tidyverse-style functions data version control:","code":"# Track and version your data processed_data |>   write_csv_dvc(     \"data/processed/results.csv\",     \"Added processed analysis results\"   )  # Track R objects model |>   write_rds_dvc(     \"models/final_model.rds\",     \"Trained final model\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"decision-tracking","dir":"Articles","previous_headings":"Core Features","what":"Decision Tracking","title":"Getting Started with thoth","text":"Document track analytical decisions throughout project:","code":"# Initialize decision tracking initialize_decision_tree()  # Record important decisions record_decision(   \"Data Preprocessing\",   \"Removed outliers beyond 3 standard deviations\",   \"Statistical validity\",   consequences = \"Reduced dataset by 2%\" )  # Generate methods section for reporting generate_methods_section()"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"quarto-integration","dir":"Articles","previous_headings":"Core Features","what":"Quarto Integration","title":"Getting Started with thoth","text":"Create apply custom report templates:","code":"# Create a custom template create_quarto_template(   \"company_template\",   primary_color = \"#0054AD\",   secondary_color = \"#00B4E0\" )  # Apply template to a report apply_template_to_report(   \"reports/analysis.qmd\",   \"company_template\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with thoth","text":"detailed information specific features, check articles: Data Version Control: vignette(\"dvc-tracking\") Git Integration: vignette(\"git-integration\") Docker Setup: vignette(\"docker-setup\") Custom Templates: vignette(\"custom-templates\") Decision Tracking: vignette(\"decision-tracking\") practical examples: - End--End Example: vignette(\"end--end-example\") - RNA-seq Analysis: vignette(\"bioinformatics-example\")","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting Help","title":"Getting Started with thoth","text":"encounter issues questions: Check package documentation File issues GitHub Read function documentation ?function_name","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Git Integration with thoth","text":"thoth provides tidyverse-friendly interface Git operations, allowing manage version control directly R environment. integration streamlines version control workflow maintaining power flexibility Git.","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"repository-status-and-changes","dir":"Articles","previous_headings":"Core Git Functions","what":"Repository Status and Changes","title":"Git Integration with thoth","text":"Monitor manage changes repository:","code":"library(thoth)  # Check repository status git_status()  # Stage changes git_add(\"analysis.R\")                                    # Single file git_add(c(\"data/processed/results.csv\", \"README.md\"))   # Multiple files git_add(\".\", force = FALSE)                             # All changes  # Commit changes git_commit(\"Add initial analysis\")                      # Commit staged changes git_commit(\"Update results\", all = TRUE)                # Stage and commit all changes"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"branch-management","dir":"Articles","previous_headings":"Core Git Functions","what":"Branch Management","title":"Git Integration with thoth","text":"Create manage branches efficiently:","code":"# View branches git_branch_list()                    # Local branches git_branch_list(all = TRUE)          # Include remote branches  # Create and switch branches git_branch(\"feature/analysis\")       # Create new branch git_checkout(\"main\")                 # Switch branch git_checkout(\"feature/fix\",          # Create and switch              create = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"remote-operations","dir":"Articles","previous_headings":"Core Git Functions","what":"Remote Operations","title":"Git Integration with thoth","text":"Synchronize remote repositories:","code":"# Sync changes git_pull()                          # Get latest changes git_push()                          # Push local changes  # Work with specific remotes/branches git_pull(\"origin\", \"main\") git_push(\"origin\", \"feature/analysis\")"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"integration-with-dvc","dir":"Articles","previous_headings":"","what":"Integration with DVC","title":"Git Integration with thoth","text":"thoth’s Git functions work seamlessly DVC complete version control:","code":"# Track data with DVC dvc_add(\"data/raw/dataset.csv\")  # Version control the tracking file git_add(\"data/raw/dataset.csv.dvc\") git_commit(\"Add dataset tracking\")  # Sync everything git_push()      # Push Git changes dvc_push()      # Push data to remote storage"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"commit-structure","dir":"Articles","previous_headings":"Best Practices","what":"1. Commit Structure","title":"Git Integration with thoth","text":"Make focused, single-purpose commits Write clear, present-tense commit messages Include context necessary","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"branch-management-1","dir":"Articles","previous_headings":"Best Practices","what":"2. Branch Management","title":"Git Integration with thoth","text":"Use feature branches new work Keep main branch stable Clean merged branches","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"workflow-integration","dir":"Articles","previous_headings":"Best Practices","what":"3. Workflow Integration","title":"Git Integration with thoth","text":"","code":"# Example analysis workflow git_checkout(\"feature/new-analysis\", create = TRUE)  # Do analysis work...  git_add(\"R/analysis.R\") git_commit(\"Add data processing function\") git_push()"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"feature-development","dir":"Articles","previous_headings":"Common Workflows","what":"Feature Development","title":"Git Integration with thoth","text":"","code":"# Start new feature git_checkout(\"main\") git_pull() git_checkout(\"feature/analysis\", create = TRUE)  # Work on feature... git_add(\".\") git_commit(\"Implement new analysis\") git_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"quick-fixes","dir":"Articles","previous_headings":"Common Workflows","what":"Quick Fixes","title":"Git Integration with thoth","text":"","code":"# Create fix branch git_checkout(\"main\") git_checkout(\"fix/issue-123\", create = TRUE)  # Make changes... git_add(\"R/functions.R\") git_commit(\"Fix calculation error\") git_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Git Integration with thoth","text":"Explore end--end example: vignette(\"end--end-example\") Learn DVC integration: vignette(\"dvc-tracking\") Check Git documentation advanced features","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/thoth.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to thoth","text":"thoth comprehensive framework setting reproducible analytics projects R.","code":"library(thoth) #> ✔ Welcome to thoth! The reproducible analytics framework #> ⚠ DVC is not installed. Some features will be limited. #>   Visit https://dvc.org/doc/install to install DVC for full functionality. #> ℹ Did you know? Thoth was the mediator in disputes between gods, especially between Set and Horus. #> * For help, see: https://sebrauschert.github.io/thoth/"},{"path":"https://sebrauschert.github.io/thoth/articles/thoth.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Introduction to thoth","text":"main function create new analytics project create_analytics_project(): creates structured project necessary components reproducible analytics.","code":"create_analytics_project(   \"my_analysis\",   use_dvc = TRUE,   use_docker = TRUE,   git_init = TRUE )"},{"path":"https://sebrauschert.github.io/thoth/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Rauschert. Author, maintainer.","code":""},{"path":"https://sebrauschert.github.io/thoth/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rauschert S (2025). thoth: Reproducible Analytics Framework Data Version Control. R package version 0.0.0.9000, https://sebrauschert.github.io/thoth/, https://github.com/sebrauschert/thoth.","code":"@Manual{,   title = {thoth: Reproducible Analytics Framework with Data Version Control},   author = {Sebastian Rauschert},   year = {2025},   note = {R package version 0.0.0.9000,     https://sebrauschert.github.io/thoth/},   url = {https://github.com/sebrauschert/thoth}, }"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"why-thoth","dir":"","previous_headings":"","what":"Why Thoth?","title":"Reproducible Analytics Framework with Data Version Control","text":"ancient Egyptian mythology, Thoth god wisdom, writing, knowledge. divine scribe, said documented everything, maintaining perfect records actions consequences. package embodies principles providing framework meticulously tracks every aspect analytical work - data decisions.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Reproducible Analytics Framework with Data Version Control","text":"thoth comprehensive framework creating reproducible analytics projects R. Modern data analysis requires just code version control; demands reproducible environments, tracked data, documented decision-making. thoth addresses challenges seamlessly integrating data version control (DVC), containerization (Docker), dependency management (renv), customizable reporting (Quarto). framework provides standardized project structure remaining flexible enough accommodate various analytical workflows. automatically tracks large data files, creates reproducible pipelines, maintains clear record analytical decisions. systematic approach ensures research reproducible also transparent well-documented.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"core-features","dir":"","previous_headings":"","what":"Core Features","title":"Reproducible Analytics Framework with Data Version Control","text":"framework enhances reproducibility four key components: Data Version Control enables tracking large data files creates reproducible pipelines metrics plot versioning. ensures data transformations traceable reproducible. Containerization Docker guarantees analysis runs consistent environment, making easier share reproduce results across different systems. Project Organization provides standardized yet flexible structure analytics projects, integrated version control dependency management renv. Documentation Reporting offers customizable report templates automated tracking analytical decisions, making easier generate comprehensive methods sections publications.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System Requirements","title":"Reproducible Analytics Framework with Data Version Control","text":"use thoth, ’ll need: Required data version control features Installation instructions Note: package work without DVC, creating mock .dvc files instead Required DVC Installation instructions Required containerization features Installation instructions","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reproducible Analytics Framework with Data Version Control","text":"can install development version thoth directly GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"sebrauschert/thoth\")"},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Reproducible Analytics Framework with Data Version Control","text":"Getting started thoth straightforward. installing package, can create new analytics project single command:","code":"library(thoth)  # Create a new project with all features enabled create_analytics_project(   \"my_analysis\",   use_dvc = TRUE,      # Enable data version control   use_docker = TRUE    # Enable containerization )  # Track your data files dvc_track(\"data/raw/dataset.csv\")  # Save and track processed data write_csv_dvc(   processed_data,   \"data/processed/results.csv\",   message = \"Add processed results\" )  # Track your trained models write_rds_dvc(   model,   \"models/random_forest.rds\",   message = \"Add trained model\" )"},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Reproducible Analytics Framework with Data Version Control","text":"Comprehensive documentation available help get started: Package website Getting started guide DVC tracking guide Custom templates guide","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Reproducible Analytics Framework with Data Version Control","text":"welcome contributions! Whether ’s bug reports, feature requests, code contributions, please see contribution guidelines details get involved.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Reproducible Analytics Framework with Data Version Control","text":"project licensed MIT License - see LICENSE file details. Thoth icon Freepik","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Template to Report — apply_template_to_report","title":"Apply Template to Report — apply_template_to_report","text":"Applies custom template Quarto report","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Template to Report — apply_template_to_report","text":"","code":"apply_template_to_report(report_path, template_name)"},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Template to Report — apply_template_to_report","text":"report_path Character. Path Quarto report template_name Character. Name template apply","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Template to Report — apply_template_to_report","text":"Invisibly returns TRUE success","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Template to Report — apply_template_to_report","text":"","code":"if (FALSE) { # \\dontrun{ apply_template_to_report(\"reports/analysis.qmd\", \"company_template\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/check_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a command is available — check_command","title":"Check if a command is available — check_command","text":"Check command available","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a command is available — check_command","text":"","code":"check_command(   cmd,   min_version = NULL,   version_cmd = \"--version\",   version_pattern = NULL )"},{"path":"https://sebrauschert.github.io/thoth/reference/check_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a command is available — check_command","text":"cmd command check min_version Minimum required version (optional) version_cmd Command get version (defaults –version) version_pattern Regex pattern extract version","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a command is available — check_command","text":"TRUE command available meets version requirement","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DVC Installation — check_dvc","title":"Check DVC Installation — check_dvc","text":"Check DVC Installation","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DVC Installation — check_dvc","text":"","code":"check_dvc()"},{"path":"https://sebrauschert.github.io/thoth/reference/check_git.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Git Installation — check_git","title":"Check Git Installation — check_git","text":"Check Git Installation","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_git.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Git Installation — check_git","text":"","code":"check_git()"},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check System Requirements — check_system_requirements","title":"Check System Requirements — check_system_requirements","text":"Check System Requirements","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check System Requirements — check_system_requirements","text":"","code":"check_system_requirements(use_dvc, use_docker)"},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check System Requirements — check_system_requirements","text":"use_dvc Logical. Whether DVC required use_docker Logical. Whether Docker required","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a confusion matrix — conf_mat","title":"Create a confusion matrix — conf_mat","text":"Create confusion matrix","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a confusion matrix — conf_mat","text":"","code":"conf_mat(data, truth, estimate, ...)"},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a confusion matrix — conf_mat","text":"data data frame containing columns specified truth estimate. truth column name containing true values. estimate column name containing predicted values. ... Additional arguments passed yardstick::conf_mat.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a confusion matrix — conf_mat","text":"confusion matrix.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a confusion matrix — conf_mat","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(mtcars) # Create a binary outcome mtcars <- mtcars %>%    mutate(vs_factor = factor(vs)) # Fit a model model <- glm(vs ~ mpg + cyl, data = mtcars, family = \"binomial\") # Make predictions preds <- predict(model, type = \"response\") # Create prediction data frame pred_data <- mtcars %>%   mutate(pred = factor(ifelse(preds > 0.5, 1, 0))) # Calculate confusion matrix conf_mat(pred_data, truth = vs_factor, estimate = pred) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Analytics Project — create_analytics_project","title":"Create a New Analytics Project — create_analytics_project","text":"Sets new analytics project standardized structure configuration reproducible analysis using DVC, Docker, renv, Quarto.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Analytics Project — create_analytics_project","text":"","code":"create_analytics_project(   path,   use_dvc = TRUE,   use_docker = TRUE,   use_renv = TRUE,   git_init = TRUE,   open = rlang::is_interactive() )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Analytics Project — create_analytics_project","text":"path Character. path project created. use_dvc Logical. Whether initialize DVC. Default TRUE. use_docker Logical. Whether set Docker configuration. Default TRUE. use_renv Logical. Whether initialize renv. Default TRUE. git_init Logical. Whether initialize git repository. Default TRUE. open Logical. Whether open new project RStudio. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Analytics Project — create_analytics_project","text":"Invisibly returns path created project.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Analytics Project — create_analytics_project","text":"","code":"if (FALSE) { # \\dontrun{ create_analytics_project(\"my_analysis\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_custom_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Custom CSS for Quarto Template — create_custom_css","title":"Create Custom CSS for Quarto Template — create_custom_css","text":"Create Custom CSS Quarto Template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_custom_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Custom CSS for Quarto Template — create_custom_css","text":"","code":"create_custom_css(   primary_color = NULL,   secondary_color = NULL,   font_family = NULL )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Custom Quarto Template — create_quarto_template","title":"Create Custom Quarto Template — create_quarto_template","text":"Creates custom Quarto template specified branding options","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Custom Quarto Template — create_quarto_template","text":"","code":"create_quarto_template(   template_name,   logo_path = NULL,   primary_color = NULL,   secondary_color = NULL,   font_family = NULL,   output_dir = \"reports/templates\" )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Custom Quarto Template — create_quarto_template","text":"template_name Character. Name template logo_path Character. Path logo file (optional) primary_color Character. Primary brand color hex format (optional) secondary_color Character. Secondary brand color hex format (optional) font_family Character. Main font family use (optional) output_dir Character. Directory save template (optional)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Custom Quarto Template — create_quarto_template","text":"Invisibly returns path created template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Custom Quarto Template — create_quarto_template","text":"","code":"if (FALSE) { # \\dontrun{ create_quarto_template(   template_name = \"company_template\",   logo_path = \"path/to/logo.png\",   primary_color = \"#FF0000\" ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_template_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Template YAML Configuration — create_template_yaml","title":"Create Template YAML Configuration — create_template_yaml","text":"Create Template YAML Configuration","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_template_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Template YAML Configuration — create_template_yaml","text":"","code":"create_template_yaml(template_name, logo_path = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/decision_tracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision Tracking Functions — decision_tracking","title":"Decision Tracking Functions — decision_tracking","text":"Functions tracking documenting human decisions analyses","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Track Files with DVC — dvc_add","title":"Track Files with DVC — dvc_add","text":"Track Files DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track Files with DVC — dvc_add","text":"","code":"dvc_add(path, message = NULL, recursive = FALSE, git_add = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track Files with DVC — dvc_add","text":"path Character vector file paths track message Optional commit message DVC recursive Logical. Whether recursively add directories. Default FALSE. git_add Logical. Whether automatically add .dvc files git. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track Files with DVC — dvc_add","text":"Invisibly returns tracked paths","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Commit Changes to DVC — dvc_commit","title":"Commit Changes to DVC — dvc_commit","text":"Commit Changes DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commit Changes to DVC — dvc_commit","text":"","code":"dvc_commit(path, message)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commit Changes to DVC — dvc_commit","text":"path Character vector file paths commit message Commit message","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commit Changes to DVC — dvc_commit","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull Data from DVC Remote — dvc_pull","title":"Pull Data from DVC Remote — dvc_pull","text":"Pull Data DVC Remote","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull Data from DVC Remote — dvc_pull","text":"","code":"dvc_pull(path = NULL, remote = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull Data from DVC Remote — dvc_pull","text":"path Optional character vector specific paths pull remote Optional name remote pull ","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull Data from DVC Remote — dvc_pull","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push Data to DVC Remote — dvc_push","title":"Push Data to DVC Remote — dvc_push","text":"Push Data DVC Remote","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push Data to DVC Remote — dvc_push","text":"","code":"dvc_push(path = NULL, remote = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push Data to DVC Remote — dvc_push","text":"path Optional character vector specific paths push remote Optional name remote push ","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push Data to DVC Remote — dvc_push","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_repro.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproduce DVC Pipeline — dvc_repro","title":"Reproduce DVC Pipeline — dvc_repro","text":"Reproduces DVC pipeline executing stages correct order.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_repro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproduce DVC Pipeline — dvc_repro","text":"","code":"dvc_repro(targets = NULL, force = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_repro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproduce DVC Pipeline — dvc_repro","text":"targets Optional character vector specific stages reproduce force Logical. Whether reproduce even dependencies changed","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_repro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproduce DVC Pipeline — dvc_repro","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_repro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproduce DVC Pipeline — dvc_repro","text":"","code":"if (FALSE) { # \\dontrun{ dvc_repro()  # reproduce entire pipeline dvc_repro(\"train_model\")  # reproduce specific stage } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a DVC Pipeline Stage — dvc_stage","title":"Create a DVC Pipeline Stage — dvc_stage","text":"Create DVC Pipeline Stage Create DVC Stage","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a DVC Pipeline Stage — dvc_stage","text":"","code":"dvc_stage(   name,   cmd,   deps = NULL,   outs = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   always_changed = FALSE )  dvc_stage(   name,   cmd,   deps = NULL,   outs = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   always_changed = FALSE )"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a DVC Pipeline Stage — dvc_stage","text":"name Stage name cmd Command execute deps Dependencies outs Outputs metrics Logical character vector indicating whether track metrics plots Logical character vector indicating whether track plots params Named list parameters always_changed Logical indicating whether stage always re-run","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a DVC Pipeline Stage — dvc_stage","text":"Invisibly returns TRUE successful Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DVC Pipeline Status — dvc_status","title":"Check DVC Pipeline Status — dvc_status","text":"Shows status DVC pipeline, indicating stages --date need reproduced.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DVC Pipeline Status — dvc_status","text":"","code":"dvc_status()"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DVC Pipeline Status — dvc_status","text":"Character vector containing status output","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check DVC Pipeline Status — dvc_status","text":"","code":"if (FALSE) { # \\dontrun{ dvc_status() } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Track files with DVC after writing — dvc_track","title":"Track files with DVC after writing — dvc_track","text":"function adds DVC tracking files written using tidyverse write functions. designed used pipe chain write operations.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track files with DVC after writing — dvc_track","text":"","code":"dvc_track(path, message = NULL, push = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track files with DVC after writing — dvc_track","text":"path path file written message optional commit message DVC push Logical. Whether push changes Git remote (default: FALSE)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track files with DVC after writing — dvc_track","text":"input path (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Track files with DVC after writing — dvc_track","text":"","code":"if (FALSE) { # \\dontrun{ data |>   readr::write_csv(\"data/processed/mydata.csv\") |>   dvc_track(\"Updated processed data\", push = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Analytics Project Data — example_projects","title":"Example Analytics Project Data — example_projects","text":"dataset containing example analytics project metrics demonstration purposes. dataset includes project characteristics performance metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Analytics Project Data — example_projects","text":"","code":"example_projects"},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Analytics Project Data — example_projects","text":"data frame 100 rows 6 variables: project_id Unique identifier project start_date Project start date team_size Number team members uses_dvc Whether project uses DVC (logical) uses_docker Whether project uses Docker (logical) completion_rate Project completion rate (0-100)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Analytics Project Data — example_projects","text":"Generated demonstration purposes","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Decision Tree to Various Formats — export_decision_tree","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"Export Decision Tree Various Formats","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"","code":"export_decision_tree(file_path, format = \"md\", output_path = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"file_path Path decision tree YAML file format Output format (\"html\", \"pdf\", \"md\") output_path Path save output file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"Invisibly returns path exported file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cli_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Format command-line errors into user-friendly messages — format_cli_error","title":"Format command-line errors into user-friendly messages — format_cli_error","text":"Format command-line errors user-friendly messages","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cli_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format command-line errors into user-friendly messages — format_cli_error","text":"","code":"format_cli_error(cmd, output, status, default_msg = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/format_cli_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format command-line errors into user-friendly messages — format_cli_error","text":"cmd command executed output output command status exit status command default_msg Default message show output empty","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cli_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format command-line errors into user-friendly messages — format_cli_error","text":"formatted error message","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cmd_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Format command output for display — format_cmd_output","title":"Format command output for display — format_cmd_output","text":"Format command output display","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cmd_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format command output for display — format_cmd_output","text":"","code":"format_cmd_output(output, success = TRUE, cmd = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/format_cmd_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format command output for display — format_cmd_output","text":"output command output format success Whether command successful cmd command run","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/format_cmd_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format command output for display — format_cmd_output","text":"Formatted output suitable display","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Methods Section from Decision Tree — generate_methods_section","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"Generate Methods Section Decision Tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"","code":"generate_methods_section(file_path, format = \"markdown\")"},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"file_path Path decision tree YAML file format Output format (\"markdown\" \"text\")","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"Character string containing methods section","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Files to Git — git_add","title":"Add Files to Git — git_add","text":"Adds files Git staging area.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Files to Git — git_add","text":"","code":"git_add(paths, force = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Files to Git — git_add","text":"paths Character vector file paths add force Logical. Whether force add ignored files. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Files to Git — git_add","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Files to Git — git_add","text":"","code":"if (FALSE) { # \\dontrun{ git_add(\"README.md\") git_add(c(\"data/raw/iris.csv\", \"data/processed/features.csv\")) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Git Branch — git_branch","title":"Create a New Git Branch — git_branch","text":"Creates new branch optionally switches .","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Git Branch — git_branch","text":"","code":"git_branch(branch_name, checkout = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Git Branch — git_branch","text":"branch_name Name new branch checkout Logical. Whether checkout new branch. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Git Branch — git_branch","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Git Branch — git_branch","text":"","code":"if (FALSE) { # \\dontrun{ git_branch(\"feature/new-analysis\") git_branch(\"hotfix/bug-123\", checkout = FALSE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List Git Branches — git_branch_list","title":"List Git Branches — git_branch_list","text":"Shows list branches repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Git Branches — git_branch_list","text":"","code":"git_branch_list(all = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Git Branches — git_branch_list","text":"Logical. Whether show branches (including remotes). Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Git Branches — git_branch_list","text":"Character vector branch names","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Git Branches — git_branch_list","text":"","code":"if (FALSE) { # \\dontrun{ git_branch_list() git_branch_list(all = TRUE)  # include remote branches } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkout a Git Branch — git_checkout","title":"Checkout a Git Branch — git_checkout","text":"Switches specified branch, optionally creating exist.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkout a Git Branch — git_checkout","text":"","code":"git_checkout(branch_name, create = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkout a Git Branch — git_checkout","text":"branch_name Name branch checkout create Logical. Whether create branch exist. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkout a Git Branch — git_checkout","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkout a Git Branch — git_checkout","text":"","code":"if (FALSE) { # \\dontrun{ git_checkout(\"main\") git_checkout(\"feature/new-analysis\", create = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone a Git Repository — git_clone","title":"Clone a Git Repository — git_clone","text":"Clones Git repository new directory.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone a Git Repository — git_clone","text":"","code":"git_clone(url, path, branch = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone a Git Repository — git_clone","text":"url URL repository clone path Path clone repository branch Name branch clone. Default NULL (clones default branch).","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_clone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone a Git Repository — git_clone","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_clone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone a Git Repository — git_clone","text":"","code":"if (FALSE) { # \\dontrun{ git_clone(\"https://github.com/user/repo.git\", \"my_analysis\") git_clone(\"https://github.com/user/repo.git\", \"my_analysis\", branch = \"develop\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Commit Changes to Git — git_commit","title":"Commit Changes to Git — git_commit","text":"Records changes repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commit Changes to Git — git_commit","text":"","code":"git_commit(message, all = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commit Changes to Git — git_commit","text":"message Commit message Logical. Whether automatically stage modified deleted files. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commit Changes to Git — git_commit","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commit Changes to Git — git_commit","text":"","code":"if (FALSE) { # \\dontrun{ git_commit(\"Add analysis script\") git_commit(\"Update results\", all = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_init_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Git Repository — git_init_repo","title":"Initialize a Git Repository — git_init_repo","text":"Initializes new Git repository current directory.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_init_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Git Repository — git_init_repo","text":"","code":"git_init_repo()"},{"path":"https://sebrauschert.github.io/thoth/reference/git_init_repo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Git Repository — git_init_repo","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_init_repo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Git Repository — git_init_repo","text":"","code":"if (FALSE) { # \\dontrun{ git_init_repo() } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git Log — git_log","title":"Get Git Log — git_log","text":"Shows commit logs.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git Log — git_log","text":"","code":"git_log(n = 10, oneline = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git Log — git_log","text":"n Number commits show. Default 10. oneline Logical. Whether show commit one line. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git Log — git_log","text":"Character vector containing log output","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git Log — git_log","text":"","code":"if (FALSE) { # \\dontrun{ git_log() git_log(n = 20, oneline = FALSE)  # detailed log } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull Changes from Git Remote — git_pull","title":"Pull Changes from Git Remote — git_pull","text":"Fetches changes remote repository integrates current branch.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull Changes from Git Remote — git_pull","text":"","code":"git_pull(remote = NULL, branch = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull Changes from Git Remote — git_pull","text":"remote Name remote. Default NULL (uses default remote). branch Name branch. Default NULL (uses current branch).","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull Changes from Git Remote — git_pull","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull Changes from Git Remote — git_pull","text":"","code":"if (FALSE) { # \\dontrun{ git_pull() git_pull(\"origin\", \"main\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push Changes to Git Remote — git_push","title":"Push Changes to Git Remote — git_push","text":"Uploads local branch commits remote repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push Changes to Git Remote — git_push","text":"","code":"git_push(remote = NULL, branch = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push Changes to Git Remote — git_push","text":"remote Name remote. Default NULL (uses default remote). branch Name branch. Default NULL (uses current branch).","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push Changes to Git Remote — git_push","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push Changes to Git Remote — git_push","text":"","code":"if (FALSE) { # \\dontrun{ git_push() git_push(\"origin\", \"feature/new-analysis\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git Status — git_status","title":"Get Git Status — git_status","text":"Shows working tree status, indicating files modified, added, deleted, untracked.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git Status — git_status","text":"","code":"git_status(short = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git Status — git_status","text":"short Logical. Whether show status short format. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git Status — git_status","text":"Character vector containing status output","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git Status — git_status","text":"","code":"if (FALSE) { # \\dontrun{ git_status() git_status(short = FALSE)  # detailed output } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Decision Tree — initialize_decision_tree","title":"Initialize a Decision Tree — initialize_decision_tree","text":"Initialize Decision Tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Decision Tree — initialize_decision_tree","text":"","code":"initialize_decision_tree(analysis_id, analyst, description, path = \"decisions\")"},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Decision Tree — initialize_decision_tree","text":"analysis_id Character string identifying analysis analyst Character string analyst name description Character string describing analysis path Character string specifying save decision tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Decision Tree — initialize_decision_tree","text":"Invisibly returns path created decision tree file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate model performance metrics — metrics","title":"Calculate model performance metrics — metrics","text":"Calculate model performance metrics","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate model performance metrics — metrics","text":"","code":"metrics(data, truth, estimate, event_level = NULL, ...)"},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate model performance metrics — metrics","text":"data data frame containing columns specified truth estimate. truth column name containing true values. estimate column name containing predicted values. event_level character string indicating level outcome considered \"event\". ... Additional arguments passed yardstick::metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate model performance metrics — metrics","text":"tibble model performance metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate model performance metrics — metrics","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(mtcars) # Create a binary outcome mtcars <- mtcars %>%    mutate(vs_factor = factor(vs)) # Fit a model model <- glm(vs ~ mpg + cyl, data = mtcars, family = \"binomial\") # Make predictions preds <- predict(model, type = \"response\") # Create prediction data frame pred_data <- mtcars %>%   mutate(pred = factor(ifelse(preds > 0.5, 1, 0))) # Calculate metrics metrics(pred_data, truth = vs_factor, estimate = pred) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result applying rhs lhs","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":null,"dir":"Reference","previous_headings":"","what":"Record a Decision — record_decision","title":"Record a Decision — record_decision","text":"Record Decision","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record a Decision — record_decision","text":"","code":"record_decision(   file_path,   check,   observation,   decision,   reasoning,   evidence = NULL )"},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record a Decision — record_decision","text":"file_path Path decision tree YAML file check Character string describing checked observation Character string describing observed decision Character string describing decision made reasoning Character string explaining reasoning evidence Character string pointing supporting evidence (e.g., plot path)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record a Decision — record_decision","text":"Invisibly returns updated decision tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Docker Configuration — setup_docker","title":"Set up Docker Configuration — setup_docker","text":"Set Docker Configuration","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Docker Configuration — setup_docker","text":"","code":"setup_docker()"},{"path":"https://sebrauschert.github.io/thoth/reference/setup_dvc_tracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up DVC Tracking — setup_dvc_tracking","title":"Set up DVC Tracking — setup_dvc_tracking","text":"Set DVC Tracking","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_dvc_tracking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up DVC Tracking — setup_dvc_tracking","text":"","code":"setup_dvc_tracking()"},{"path":"https://sebrauschert.github.io/thoth/reference/setup_quarto_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Quarto Template — setup_quarto_template","title":"Set up Quarto Template — setup_quarto_template","text":"Set Quarto Template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_quarto_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Quarto Template — setup_quarto_template","text":"","code":"setup_quarto_template()"},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":null,"dir":"Reference","previous_headings":"","what":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"Provides framework setting reproducible analytics projects integrated version control data using DVC (Data Version Control), containerization using Docker, dependency management using renv, customizable reporting using Quarto. Implements best practices project organization, workflow management, reproducible research.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"system-requirements","dir":"Reference","previous_headings":"","what":"System Requirements","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"package requires several external tools installed: DVC (Data Version Control) >= 2.0.0 Required data version control features Installation: Visit https://dvc.org/doc/install Note: package work without DVC installed, create mock .dvc files instead actual version control Python >= 3.7 Required DVC Installation: Visit https://www.python.org/downloads/ Docker >= 20.10.0 Required containerization features Installation: Visit https://docs.docker.com/get-docker/ Note: Docker features optional","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"package-features","dir":"Reference","previous_headings":"","what":"Package Features","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"Project Setup Create standardized project structures Initialize version control Set dependency management Data Version Control Track large data files Create reproducible pipelines Track metrics plots Containerization Create reproducible environments Package analyses distribution Reporting Customizable report templates Decision tracking Methods section generation","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"get started thoth: Install system requirements (DVC, Python, Docker) Create new project:   Read vignettes:","code":"library(thoth) create_analytics_project(\"my_analysis\") browseVignettes(\"thoth\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"Maintainer: Sebastian Rauschert sebastian.rauschert@telethonkids.org.au","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/version_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Version Control Functions — version_control","title":"Version Control Functions — version_control","text":"Functions interacting DVC Git R","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a CSV file and track it with DVC — write_csv_dvc","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"Write CSV file track DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"","code":"write_csv_dvc(   x,   path,   message,   stage_name = NULL,   deps = NULL,   params = NULL,   metrics = FALSE,   push = FALSE )"},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"x data frame write CSV path Path save CSV file message Git commit message stage_name Optional DVC stage name deps Optional vector dependency files params Optional list parameters metrics Logical, whether track DVC metrics (default: FALSE) push Logical, whether push changes Git remote (default: FALSE)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"input data frame (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"","code":"if (FALSE) { # \\dontrun{ # Simple tracking data |> write_csv_dvc(   \"data/processed/results.csv\",   message = \"Add processed results\",   push = TRUE )  # As part of a pipeline data |> write_csv_dvc(   \"data/processed/features.csv\",   message = \"Add feature matrix\",   stage_name = \"feature_engineering\",   deps = \"data/raw/input.csv\",   params = list(n_components = 10),   push = TRUE ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/write_gitignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Default .gitignore File — write_gitignore","title":"Write Default .gitignore File — write_gitignore","text":"Write Default .gitignore File","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_gitignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Default .gitignore File — write_gitignore","text":"","code":"write_gitignore()"},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RDS with DVC tracking — write_rds_dvc","title":"Write RDS with DVC tracking — write_rds_dvc","text":"wrapper around saveRDS automatically tracks output file DVC optionally creates DVC pipeline stage.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RDS with DVC tracking — write_rds_dvc","text":"","code":"write_rds_dvc(   object,   file,   message = NULL,   stage_name = NULL,   deps = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   push = FALSE,   ... )"},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RDS with DVC tracking — write_rds_dvc","text":"object Object save file Path write message Optional DVC commit message stage_name Optional name DVC stage. provided, creates pipeline stage. deps Character vector dependency files (optional, pipeline stages) metrics Logical. Whether mark output DVC metric plots Logical. Whether mark output DVC plot params Named list parameters stage (optional) push Logical. Whether push changes Git remote (default: FALSE) ... Additional arguments passed saveRDS","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RDS with DVC tracking — write_rds_dvc","text":"input object (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RDS with DVC tracking — write_rds_dvc","text":"","code":"if (FALSE) { # \\dontrun{ # Simple tracking model |> write_rds_dvc(   \"models/model.rds\",   message = \"Updated model\",   push = TRUE )  # As part of a pipeline model |> write_rds_dvc(   \"models/rf_model.rds\",   message = \"Save trained random forest model\",   stage_name = \"train_model\",   deps = c(\"data/processed/training.csv\", \"R/train_model.R\"),   params = list(ntree = 500),   push = TRUE ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/write_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Project README — write_readme","title":"Write Project README — write_readme","text":"Write Project README","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Project README — write_readme","text":"","code":"write_readme(project_name)"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"new-features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"thoth 0.0.0.9000","text":"dvc_track() tracking files writing write_csv_dvc() writing tracking CSV files write_rds_dvc() writing tracking RDS files Added comprehensive test suite DVC tracking functions Added vignette demonstrating DVC tracking functionality","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"documentation-improvements-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Documentation improvements","title":"thoth 0.0.0.9000","text":"Updated pkgdown site DVC tracking documentation Added examples DVC tracking functions Improved function documentation detailed descriptions","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"bug-fixes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"thoth 0.0.0.9000","text":"None (initial release)","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"initial-development-version-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Initial development version","title":"thoth 0.0.0.9000","text":"Added core functionality creating reproducible analytics projects Implemented data version control DVC integration Added Git integration version control Implemented Docker containerization Added dependency management renv Implemented decision tracking functionality Added customizable reporting Quarto Added metrics functions model evaluation","code":""}]
