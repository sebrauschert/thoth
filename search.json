[{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to thoth","title":"Contributing to thoth","text":"outlines propose change thoth. detailed info contributing , e.g. tidyverse packages, please see development contributing guide.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to thoth","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to thoth","text":"making significant changes, please make sure : R (>= 4.1.0) DVC Docker Quarto","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to thoth","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to thoth","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"sebrauschert/thoth\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to thoth","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://sebrauschert.github.io/thoth/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to thoth","text":"Please note thoth project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RNA-seq Analysis Example","text":"vignette demonstrates use thoth typical RNA-seq analysis workflow using edgeR limma. ’ll: Set reproducible project structure Track raw count data DVC Perform quality control Run differential expression analysis Track decisions results Create reproducible pipeline","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"RNA-seq Analysis Example","text":"First, let’s create new project DVC enabled:","code":"library(thoth) library(tidyverse) library(edgeR) library(limma) library(statmod)  # Required for edgeR library(ComplexHeatmap)  # Create new project create_analytics_project(   \"rnaseq_analysis\",   use_dvc = TRUE,   use_docker = TRUE,   git_init = TRUE )  # Change to project directory setwd(\"rnaseq_analysis\")"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"load-and-track-raw-data","dir":"Articles","previous_headings":"","what":"Load and Track Raw Data","title":"RNA-seq Analysis Example","text":"Let’s start simulated RNA-seq dataset:","code":"# Simulate count data set.seed(42) n_genes <- 10000 n_samples <- 8  # Create counts matrix counts <- matrix(   rnbinom(n_genes * n_samples, mu = 100, size = 1),   nrow = n_genes,   ncol = n_samples )  # Add row and column names rownames(counts) <- paste0(\"gene_\", 1:n_genes) colnames(counts) <- paste0(\"sample_\", 1:n_samples)  # Create sample metadata sample_info <- data.frame(   sample = colnames(counts),   group = rep(c(\"control\", \"treatment\"), each = 4),   batch = rep(c(\"A\", \"B\"), 4) )  # Save and track raw data with DVC counts |>   as.data.frame() |>   rownames_to_column(\"gene_id\") |>   write_csv_dvc(     \"data/raw/counts.csv\",     message = \"Add raw count data\"   )  sample_info |>   write_csv_dvc(     \"data/raw/sample_info.csv\",     message = \"Add sample metadata\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"initialize-decision-tree","dir":"Articles","previous_headings":"","what":"Initialize Decision Tree","title":"RNA-seq Analysis Example","text":"Let’s track analytical decisions:","code":"# Initialize decision tracking decision_file <- initialize_decision_tree(   analysis_id = \"rnaseq_2024\",   analyst = \"Data Scientist\",   description = \"Differential expression analysis of treatment vs control\" )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"create-dgelist-object","dir":"Articles","previous_headings":"Data Processing and QC","what":"1. Create DGEList Object","title":"RNA-seq Analysis Example","text":"","code":"# Read data counts_df <- read_csv(\"data/raw/counts.csv\") sample_info <- read_csv(\"data/raw/sample_info.csv\")  # Create DGEList dge <- DGEList(   counts = counts_df |> column_to_rownames(\"gene_id\"),   group = sample_info$group )  # Add batch information dge$samples$batch <- sample_info$batch"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"quality-control","dir":"Articles","previous_headings":"Data Processing and QC","what":"2. Quality Control","title":"RNA-seq Analysis Example","text":"","code":"# Calculate library sizes and CPM lib_sizes <- dge$samples$lib.size cpms <- cpm(dge)  # Filter low expression genes keep <- filterByExpr(dge, group = dge$samples$group) dge_filtered <- dge[keep, ]  # Record filtering decision record_decision(   decision_file,   check = \"Gene filtering\",   observation = sprintf(     \"Removed %d low expression genes\",     sum(!keep)   ),   decision = \"Filter using filterByExpr()\",   reasoning = \"Remove genes with consistently low counts\",   evidence = \"plots/gene_expression_density.png\" )  # Save filtered data dge_filtered$counts |>   as.data.frame() |>   rownames_to_column(\"gene_id\") |>   write_csv_dvc(     \"data/processed/filtered_counts.csv\",     message = \"Add filtered count data\",     stage_name = \"filter_genes\",     deps = c(       \"data/raw/counts.csv\",       \"data/raw/sample_info.csv\"     ),     params = list(       min_cpm = 1,       min_samples = 4     )   )  # Normalization dge_filtered <- calcNormFactors(dge_filtered)  # Record normalization decision record_decision(   decision_file,   check = \"Normalization\",   observation = \"Library sizes vary between samples\",   decision = \"Apply TMM normalization\",   reasoning = \"Account for composition bias\",   evidence = NULL )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"quality-control-plots","dir":"Articles","previous_headings":"Data Processing and QC","what":"3. Quality Control Plots","title":"RNA-seq Analysis Example","text":"","code":"# MDS plot limma::plotMDS(dge_filtered) |>   ggplot2::ggsave(     \"plots/mds_plot.png\",     width = 8,     height = 6   )  # Record MDS observation record_decision(   decision_file,   check = \"Sample clustering\",   observation = \"Samples cluster by treatment with some batch effect\",   decision = \"Include batch in design matrix\",   reasoning = \"Account for technical variation\",   evidence = \"plots/mds_plot.png\" )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"design-matrix-and-model-fitting","dir":"Articles","previous_headings":"Differential Expression Analysis","what":"1. Design Matrix and Model Fitting","title":"RNA-seq Analysis Example","text":"","code":"# Create design matrix design <- model.matrix(   ~batch + group,   data = dge_filtered$samples )  # Fit model fit <- lmFit(   voom(dge_filtered, design),   design ) fit <- eBayes(fit)  # Get results results <- topTable(   fit,   coef = \"grouptreatment\",   number = Inf ) |>   rownames_to_column(\"gene_id\")  # Save results with DVC results |>   write_csv_dvc(     \"data/processed/de_results.csv\",     message = \"Add differential expression results\",     stage_name = \"de_analysis\",     deps = \"data/processed/filtered_counts.csv\",     params = list(       adj_p_threshold = 0.05,       lfc_threshold = 1     ),     metrics = TRUE  # Track as DVC metrics   )  # Record analysis decisions record_decision(   decision_file,   check = \"Differential expression\",   observation = sprintf(     \"Found %d DE genes (FDR < 0.05, |logFC| > 1)\",     sum(results$adj.P.Val < 0.05 & abs(results$logFC) > 1)   ),   decision = \"Use voom-limma pipeline\",   reasoning = \"Account for mean-variance relationship\",   evidence = \"data/processed/de_results.csv\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"visualization","dir":"Articles","previous_headings":"Differential Expression Analysis","what":"2. Visualization","title":"RNA-seq Analysis Example","text":"","code":"# Create volcano plot results |>   ggplot(aes(x = logFC, y = -log10(adj.P.Val))) +   geom_point(     aes(color = adj.P.Val < 0.05 & abs(logFC) > 1),     alpha = 0.6   ) +   scale_color_manual(values = c(\"grey\", \"red\")) +   theme_minimal() +   labs(     title = \"Volcano Plot\",     x = \"log2 Fold Change\",     y = \"-log10 Adjusted P-value\"   ) |>   ggsave(     \"plots/volcano_plot.png\",     width = 10,     height = 8   )  # Create heatmap of top DE genes top_genes <- results |>   filter(adj.P.Val < 0.05, abs(logFC) > 1) |>   slice_head(n = 50) |>   pull(gene_id)  # Get normalized expression for top genes expr_mat <- voom(dge_filtered, design)$E[top_genes, ]  # Save heatmap png(\"plots/heatmap.png\", width = 800, height = 1000) Heatmap(   expr_mat,   name = \"Expression\",   column_split = dge_filtered$samples$group,   show_row_names = FALSE ) dev.off()"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"export-analysis-documentation","dir":"Articles","previous_headings":"","what":"Export Analysis Documentation","title":"RNA-seq Analysis Example","text":"","code":"# Export decision tree export_decision_tree(   decision_file,   format = \"html\",   output_path = \"reports/analysis_decisions.html\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"complete-dvc-pipeline","dir":"Articles","previous_headings":"","what":"Complete DVC Pipeline","title":"RNA-seq Analysis Example","text":"analysis now tracked DVC:","code":"# View pipeline dvc dag  # Reproduce analysis dvc repro  # Push to remote dvc push"},{"path":"https://sebrauschert.github.io/thoth/articles/bioinformatics-example.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"RNA-seq Analysis Example","text":"example demonstrates : - Track RNA-seq data DVC - Document QC analysis decisions - Create reproducible bioinformatics pipelines - Generate publication-ready figures - Share results methods entire analysis version controlled reproducible, : - Raw data tracked DVC - Code Git - Dependencies managed renv - Analysis decisions documented - Docker environment reproducibility","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Custom Templates","text":"Quarto templates help maintain consistent branding styling across organization’s reports. thoth provides tools create manage custom Quarto templates organization’s branding, colors, styling preferences.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"basic-template-creation","dir":"Articles","previous_headings":"","what":"Basic Template Creation","title":"Custom Templates","text":"Create new template organization’s branding:","code":"library(thoth)  create_quarto_template(   template_name = \"company_template\",   primary_color = \"#0054AD\",   secondary_color = \"#00B4E0\",   logo_path = \"path/to/logo.png\",   font_family = \"Arial\" )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"css-customization","dir":"Articles","previous_headings":"Template Components","what":"CSS Customization","title":"Custom Templates","text":"template generates custom CSS file branding:","code":"/* Custom styles for Quarto template */ :root {   --primary-color: #0054AD;   --secondary-color: #00B4E0; }  .navbar {   background-color: var(--primary-color); }  .title {   color: var(--primary-color); }  a {   color: var(--secondary-color); }  body {   font-family: Arial; }"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"yaml-configuration","dir":"Articles","previous_headings":"Template Components","what":"YAML Configuration","title":"Custom Templates","text":"template includes YAML configuration:","code":"format:   html:     theme: cosmo     css: custom.css     toc: true     code-fold: true     code-tools: true     df-print: paged     fig-width: 8     fig-height: 6     fig-format: png     fig-dpi: 300"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"applying-templates","dir":"Articles","previous_headings":"","what":"Applying Templates","title":"Custom Templates","text":"Apply template Quarto document:","code":"apply_template_to_report(\"reports/analysis.qmd\", \"company_template\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"custom-fonts","dir":"Articles","previous_headings":"Advanced Customization","what":"Custom Fonts","title":"Custom Templates","text":"Use web fonts template: Add font link template:","code":"create_quarto_template(   template_name = \"modern_template\",   font_family = \"'Source Sans Pro', sans-serif\",   primary_color = \"#2E5EAA\" ) format:   html:     css: custom.css     include-in-header:       text: |         <link href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap\" rel=\"stylesheet\">"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"custom-layouts","dir":"Articles","previous_headings":"Advanced Customization","what":"Custom Layouts","title":"Custom Templates","text":"Create custom layouts CSS Grid:","code":".custom-layout {   display: grid;   grid-template-columns: 1fr 2fr;   gap: 2rem; }  .sidebar {   background: var(--primary-color);   padding: 1rem;   color: white; }  .main-content {   padding: 1rem; }"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"interactive-elements","dir":"Articles","previous_headings":"Advanced Customization","what":"Interactive Elements","title":"Custom Templates","text":"Add custom JavaScript interactivity: Include template:","code":"// custom.js document.addEventListener('DOMContentLoaded', function() {   // Add custom behaviors }); format:   html:     include-after-body:       file: custom.js"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Custom Templates","text":"Use consistent color palette Ensure sufficient contrast Consider color blindness accessibility Choose readable fonts Maintain consistent hierarchy Use appropriate font sizes Keep layouts clean consistent Use white space effectively Make navigation intuitive Test different screen sizes Use flexible layouts Optimize images","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"template-organization","dir":"Articles","previous_headings":"","what":"Template Organization","title":"Custom Templates","text":"Recommended structure template files:","code":"reports/ └── templates/     └── company_template/         ├── _template.yml         ├── custom.css         ├── custom.js         └── assets/             └── logo.png"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"executive-summary-template","dir":"Articles","previous_headings":"Example Templates","what":"Executive Summary Template","title":"Custom Templates","text":"","code":"# _template.yml format:   html:     theme: cosmo     css: custom.css     toc: false     code-fold: true     code-tools: false     fig-width: 10     fig-height: 6     fig-format: png     fig-dpi: 300     include-in-header:       file: header.html"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"technical-report-template","dir":"Articles","previous_headings":"Example Templates","what":"Technical Report Template","title":"Custom Templates","text":"","code":"# _template.yml format:   html:     theme: cosmo     css: custom.css     toc: true     toc-depth: 3     code-fold: show     code-tools: true     df-print: paged     fig-width: 8     fig-height: 6     fig-format: png     fig-dpi: 300     include-in-header:       file: header.html"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"integration-with-r-markdown","dir":"Articles","previous_headings":"","what":"Integration with R Markdown","title":"Custom Templates","text":"Quarto preferred format, templates can adapted R Markdown:","code":"output:   html_document:     theme: cosmo     css: templates/company_template/custom.css     toc: true     code_folding: hide"},{"path":"https://sebrauschert.github.io/thoth/articles/custom-templates.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Custom Templates","text":"Create templates different report types Add custom JavaScript functionality Implement accessibility features Share templates across organization","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Decision Tracking with thoth","text":"One challenges bioinformatics data analysis documenting tracking human decisions made analysis process. code data can version controlled, reasoning behind key analytical decisions often remains undocumented. thoth package provides functionality track decisions structured way.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Decision Tracking with thoth","text":"install package GitHub, first ensure required dependencies:","code":"# Install required dependencies if not already installed required_packages <- c(\"usethis\", \"yaml\", \"cli\", \"digest\", \"rmarkdown\", \"tools\") for (pkg in required_packages) {   if (!requireNamespace(pkg, quietly = TRUE)) {     install.packages(pkg)   } }  # Install thoth from GitHub if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"sebrauschert/thoth\")"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Decision Tracking with thoth","text":"First, let’s load package:","code":"library(thoth)"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"creating-a-decision-tree","dir":"Articles","previous_headings":"","what":"Creating a Decision Tree","title":"Decision Tracking with thoth","text":"starting new analysis, initialize decision tree track decisions:","code":"decision_file <- initialize_decision_tree(   analysis_id = \"RNA_seq_2024_01\",   analyst = \"Jane Smith\",   description = \"Differential expression analysis of treatment vs control samples\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"recording-decisions","dir":"Articles","previous_headings":"","what":"Recording Decisions","title":"Decision Tracking with thoth","text":"progress analysis, record key decisions observations:","code":"# Record a quality control decision record_decision(   file_path = decision_file,   check = \"Sample-wise PCA clustering\",   observation = \"Treatment samples cluster together except for sample T3\",   decision = \"Exclude sample T3\",   reasoning = \"T3 clusters with controls, likely sample swap\",   evidence = \"plots/PCA_pre_filtering.pdf\" )  # Record a biological validation step record_decision(   file_path = decision_file,   check = \"Known pathway markers\",   observation = \"Expected stress response genes upregulated\",   decision = \"Results biologically plausible\",   reasoning = \"Key marker genes show expected direction of change\",   evidence = \"tables/marker_genes_expression.csv\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"generating-methods-documentation","dir":"Articles","previous_headings":"","what":"Generating Methods Documentation","title":"Decision Tracking with thoth","text":"can automatically generate methods section decision tree:","code":"# Generate methods section methods_text <- generate_methods_section(decision_file) cat(methods_text)"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"exporting-decision-trees","dir":"Articles","previous_headings":"","what":"Exporting Decision Trees","title":"Decision Tracking with thoth","text":"Export decision tree various formats sharing documentation:","code":"# Export to markdown export_decision_tree(decision_file, format = \"md\")  # Export to HTML (requires rmarkdown) if (requireNamespace(\"rmarkdown\", quietly = TRUE)) {   export_decision_tree(decision_file, format = \"html\") }"},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"integration-with-project-workflow","dir":"Articles","previous_headings":"","what":"Integration with Project Workflow","title":"Decision Tracking with thoth","text":"decision tracking functionality integrates seamlessly analysis workflow: Initialize decision tree start analysis Record decisions make Use exported documentation methods sections papers Keep decision tree version control","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Decision Tracking with thoth","text":"recommended practices using decision tracking functionality: Consistent: Record decisions make , fact Specific: Include clear observations reasoning Link Evidence: Always link supporting plots, tables, evidence Version Control: Keep decision trees version control Review: Regularly review decisions team members","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/decision-tracking.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Decision Tracking with thoth","text":"tracking analytical decisions structured way, can: Make analysis process transparent Facilitate knowledge transfer within teams Improve reproducibility Generate better documentation decision tracking functionality thoth helps make human expertise trackable code, breaking free “90% automation trap” crucial human judgment remains hidden.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Docker Setup with thoth","text":"Docker containerization essential reproducible analytics. thoth automatically sets Docker environment matches local R setup, ensuring analysis can easily shared reproduced others.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"automatic-docker-configuration","dir":"Articles","previous_headings":"","what":"Automatic Docker Configuration","title":"Docker Setup with thoth","text":"create new analytics project thoth, automatically: Detects current R version Creates Dockerfile based matching rocker/rstudio image Sets docker-compose configuration easy deployment","code":"library(thoth)  # Create new project with Docker enabled create_analytics_project(   \"my_analysis\",   use_docker = TRUE  # Docker is enabled by default )"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"version-matching","dir":"Articles","previous_headings":"","what":"Version Matching","title":"Docker Setup with thoth","text":"One key features thoth’s Docker integration automatic R version matching: Dockerfile uses exactly R version local installation ensures analysis environment can perfectly replicated Makes easy share complete analysis environment collaborators example, ’re using R 4.3.2, generated Dockerfile start :","code":"FROM rocker/rstudio:4.3.2"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"docker-configuration","dir":"Articles","previous_headings":"","what":"Docker Configuration","title":"Docker Setup with thoth","text":"setup creates two key files:","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"dockerfile","dir":"Articles","previous_headings":"Docker Configuration","what":"1. Dockerfile","title":"Docker Setup with thoth","text":"","code":"# Uses your exact R version FROM rocker/rstudio:${R_VERSION}  # Install system dependencies RUN apt-get update && apt-get install -y \\     python3-pip \\     && rm -rf /var/lib/apt/lists/*  # Install DVC RUN pip3 install dvc  # Create working directory WORKDIR /project  # Copy project files COPY . /project/  # Install R packages RUN R -e 'install.packages(\"renv\")' RUN R -e 'renv::restore()'  # Set permissions for RStudio user RUN chown -R rstudio:rstudio /project  # Command to keep the container running CMD [\"/init\"]"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"docker-compose-yml","dir":"Articles","previous_headings":"Docker Configuration","what":"2. docker-compose.yml","title":"Docker Setup with thoth","text":"","code":"services:   rstudio:     build: .     ports:       - \"8787:8787\"     environment:       - PASSWORD=rstudio       - ROOT=TRUE     volumes:       - .:/project     user: rstudio"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"starting-the-environment","dir":"Articles","previous_headings":"Using the Docker Environment","what":"Starting the Environment","title":"Docker Setup with thoth","text":"visit http://localhost:8787 browser: - Username: rstudio - Password: rstudio","code":"# From your project directory docker-compose up -d"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"stopping-the-environment","dir":"Articles","previous_headings":"Using the Docker Environment","what":"Stopping the Environment","title":"Docker Setup with thoth","text":"","code":"docker-compose down"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"benefits-of-version-matched-containers","dir":"Articles","previous_headings":"","what":"Benefits of Version-Matched Containers","title":"Docker Setup with thoth","text":"Exact R version development dependencies installed automatically System-level configurations matched Share complete analysis environment Recipients don’t need match R setup Just need Docker installed Team members can run identical environments “works machine” problems Consistent results across systems Archive exact environment analysis Future-proof work Easy spin years later","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example Workflow","title":"Docker Setup with thoth","text":"Development Sharing Collaboration","code":"# Create project with Docker create_analytics_project(\"analysis\", use_docker = TRUE)  # Work on your analysis locally # All dependencies are tracked in renv.lock # Share your project including docker/ directory git push origin main  # Recipients can simply: git clone <repository> cd <repository> docker-compose up -d # Team members can work in identical environments # Regardless of their local R setup"},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Docker Setup with thoth","text":"Keep Dockerfile docker-compose.yml version control Update dependencies change Document custom modifications Regularly test Docker build Verify analysis runs container Check reproducibility Document special setup requirements Include Docker-specific instructions README Note system requirements","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"customization","dir":"Articles","previous_headings":"","what":"Customization","title":"Docker Setup with thoth","text":"can customize Docker setup modifying: Add system dependencies Install additional tools Modify environment settings Change port mappings Add environment variables Configure volumes","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/docker-setup.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Docker Setup with thoth","text":"thoth’s Docker integration automatic R version matching ensures analytics projects : - Perfectly reproducible - Easy share - Future-proof - Collaboration-ready automatically creating Docker environment matches development setup, thoth removes complexity environment management ensuring analysis can reproduced exactly intended.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Version Control with thoth","text":"Data Version Control (DVC) powerful tool managing data science workflows. DVC written Python, thoth provides seamless integration R, allowing : Track large data files without storing Git Create reproducible pipelines Track metrics plots Share data across team members guide walk setting DVC using effectively thoth.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Data Version Control with thoth","text":"starting, need : Install DVC: Using pip (recommended): Using conda: Using Homebrew (macOS): installation methods, visit DVC Installation Guide Git initialized project: Install thoth: Verify DVC installation:","code":"pip install dvc conda install -c conda-forge dvc brew install dvc git init remotes::install_github(\"sebrauschert/thoth\") # Check if DVC is available dvc_available <- Sys.which(\"dvc\") != \"\" if (!dvc_available) {   message(\"DVC is not installed. Please install it first.\") } else {   message(\"DVC is installed and ready to use!\") }"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"Data Version Control with thoth","text":"create new analytics project thoth, DVC automatically set : : - Initializes DVC - Creates data directories tracked DVC - Sets appropriate .gitignore rules - Creates basic DVC pipeline structure","code":"library(thoth) create_analytics_project(   \"my_analysis\",   use_dvc = TRUE  # DVC is enabled by default )"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"tracking-csv-files","dir":"Articles","previous_headings":"Simple Data Tracking","what":"Tracking CSV Files","title":"Data Version Control with thoth","text":"simplest way track data files using DVC-aware write functions:","code":"# Track a CSV file data |> write_csv_dvc(   \"data/processed/results.csv\",   message = \"Add processed results\" )  # Track with additional readr::write_csv parameters data |> write_csv_dvc(   \"data/processed/results.csv\",   message = \"Add processed results\",   na = \"NA\",   quote = \"needed\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"tracking-r-objects","dir":"Articles","previous_headings":"Simple Data Tracking","what":"Tracking R Objects","title":"Data Version Control with thoth","text":"R objects, use write_rds_dvc:","code":"# Save and track a model model |> write_rds_dvc(   \"models/rf_model.rds\",   message = \"Save trained random forest model\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"manual-tracking","dir":"Articles","previous_headings":"Simple Data Tracking","what":"Manual Tracking","title":"Data Version Control with thoth","text":"can also track files ’ve written:","code":"# Write file normally readr::write_csv(data, \"data/processed/results.csv\")  # Track with DVC dvc_track(\"data/processed/results.csv\", \"Add processed results\")"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"creating-dvc-pipelines","dir":"Articles","previous_headings":"","what":"Creating DVC Pipelines","title":"Data Version Control with thoth","text":"DVC pipelines help make analysis reproducible tracking: - Input dependencies - Output files - Parameters - Metrics plots","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"basic-pipeline-stage","dir":"Articles","previous_headings":"Creating DVC Pipelines","what":"Basic Pipeline Stage","title":"Data Version Control with thoth","text":"","code":"# Create a data processing stage data |> write_csv_dvc(   \"data/processed/results.csv\",   stage_name = \"process_data\",   deps = \"data/raw/input.csv\",   params = list(threshold = 0.5) )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"tracking-metrics","dir":"Articles","previous_headings":"Creating DVC Pipelines","what":"Tracking Metrics","title":"Data Version Control with thoth","text":"Track evaluation metrics automatically:","code":"metrics |> write_csv_dvc(   \"metrics/evaluation.csv\",   stage_name = \"evaluate_model\",   deps = c(\"models/rf_model.rds\", \"data/test/test.csv\"),   metrics = TRUE  # Mark as DVC metrics )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"tracking-plots","dir":"Articles","previous_headings":"Creating DVC Pipelines","what":"Tracking Plots","title":"Data Version Control with thoth","text":"Track visualization files:","code":"# Save plot data with DVC tracking plot_data |> write_csv_dvc(   \"plots/feature_importance.csv\",   stage_name = \"create_plots\",   deps = \"models/rf_model.rds\",   plots = TRUE  # Mark as DVC plot )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"complete-pipeline-example","dir":"Articles","previous_headings":"","what":"Complete Pipeline Example","title":"Data Version Control with thoth","text":"’s complete example machine learning pipeline:","code":"library(thoth)  # 1. Data Preprocessing raw_data |> write_csv_dvc(   \"data/processed/preprocessed.csv\",   stage_name = \"preprocess\",   deps = \"data/raw/input.csv\",   params = list(     remove_na = TRUE,     normalize = TRUE   ) )  # 2. Feature Engineering features |> write_csv_dvc(   \"data/processed/features.csv\",   stage_name = \"feature_engineering\",   deps = \"data/processed/preprocessed.csv\",   params = list(     n_components = 10   ) )  # 3. Model Training model |> write_rds_dvc(   \"models/rf_model.rds\",   stage_name = \"train_model\",   deps = \"data/processed/features.csv\",   params = list(     ntree = 500,     mtry = 3   ) )  # 4. Model Evaluation metrics |> write_csv_dvc(   \"metrics/evaluation.csv\",   stage_name = \"evaluate\",   deps = c(     \"models/rf_model.rds\",     \"data/processed/features.csv\"   ),   metrics = TRUE )  # 5. Create Plots plot_data |> write_csv_dvc(   \"plots/performance.csv\",   stage_name = \"visualize\",   deps = \"metrics/evaluation.csv\",   plots = TRUE )"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"working-with-remote-storage","dir":"Articles","previous_headings":"","what":"Working with Remote Storage","title":"Data Version Control with thoth","text":"DVC supports various remote storage options (S3, GCS, etc.). configured, can:","code":"# Pull data from remote dvc_pull()  # Push data to remote dvc_push()  # Pull specific files dvc_pull(\"data/processed/features.csv\")"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Data Version Control with thoth","text":"Keep raw data data/raw/ Store processed data data/processed/ Save models models/ Keep metrics metrics/ Store plots plots/ Make stage names descriptive Use consistent naming conventions Include purpose name Always specify input dependencies Include R scripts dependencies Track configuration files Track important hyperparameters Include preprocessing parameters Document parameter choices Commit .dvc files Git Use meaningful commit messages Push data remote storage","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Data Version Control with thoth","text":"Common issues solutions: DVC initialized: File tracked: Pipeline updating:","code":"# Initialize DVC manually system2(\"dvc\", \"init\") # Check if file is tracked system2(\"dvc\", c(\"status\", \"path/to/file\")) # Force pipeline stage rerun system2(\"dvc\", c(\"repro\", \"--force\"))"},{"path":"https://sebrauschert.github.io/thoth/articles/dvc-tracking.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Data Version Control with thoth","text":"DVC integration thoth provides seamless way : - Track large data files - Create reproducible pipelines - Share data across team members - Monitor experiments - Maintain data science workflows following practices, can create reproducible analyses easy share collaborate .","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"End-to-End Example with Iris Dataset","text":"vignette provides complete end--end example using thoth classic iris dataset. ’ll cover: Setting new analytics project Versioning raw data Processing cleaning data Training model Evaluating results Creating reproducible pipeline","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"End-to-End Example with Iris Dataset","text":"First, let’s create new analytics project DVC enabled:","code":"library(thoth) library(tidyverse) library(tidymodels)  # Create a new project create_analytics_project(   \"iris_analysis\",   use_dvc = TRUE,   use_docker = TRUE,   git_init = TRUE )  # Change to the project directory setwd(\"iris_analysis\")"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"save-and-version-raw-data","dir":"Articles","previous_headings":"","what":"Save and Version Raw Data","title":"End-to-End Example with Iris Dataset","text":"Let’s save iris dataset raw data track DVC:","code":"# Save raw iris data iris %>%    as_tibble() %>%   write_csv_dvc(     \"data/raw/iris.csv\",     message = \"Add raw iris dataset\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"data-processing","dir":"Articles","previous_headings":"","what":"Data Processing","title":"End-to-End Example with Iris Dataset","text":"Now let’s process data : 1. Converting column names snake_case 2. Creating train/test split 3. Scaling numeric features","code":"# Read and process data processed_data <- read_csv(\"data/raw/iris.csv\") %>%   janitor::clean_names() %>%   mutate(     species = as.factor(species),     # Scale numeric columns properly     across(where(is.numeric), function(x) {       as.numeric(scale(x))     })   )  # Create train/test split set.seed(123) split <- initial_split(processed_data, prop = 0.8) train_data <- training(split) test_data <- testing(split)  # Save processed datasets with DVC train_data %>%   write_csv_dvc(     \"data/processed/train.csv\",     message = \"Add processed training data\",     stage_name = \"prepare_data\",     deps = \"data/raw/iris.csv\",     params = list(       train_prop = 0.8,       seed = 123     )   )  test_data %>%   write_csv_dvc(     \"data/processed/test.csv\",     message = \"Add processed test data\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"model-training","dir":"Articles","previous_headings":"","what":"Model Training","title":"End-to-End Example with Iris Dataset","text":"Let’s train random forest model:","code":"# Train random forest model rf_spec <- rand_forest(   trees = 500,   mtry = 3 ) %>%   set_engine(\"ranger\") %>%   set_mode(\"classification\")  rf_fit <- rf_spec %>%   fit(     species ~ .,     data = train_data   )  # Save model with DVC rf_fit %>%   write_rds_dvc(     \"models/rf_model.rds\",     message = \"Add trained random forest model\",     stage_name = \"train_model\",     deps = \"data/processed/train.csv\",     params = list(       n_trees = 500,       mtry = 3     )   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"model-evaluation","dir":"Articles","previous_headings":"","what":"Model Evaluation","title":"End-to-End Example with Iris Dataset","text":"Let’s evaluate model track metrics:","code":"# Make predictions predictions <- rf_fit %>%   predict(test_data) %>%   bind_cols(test_data)  # Calculate metrics metrics <- predictions %>%   metrics(truth = species, estimate = .pred_class)  # Create and save confusion matrix plot predictions %>%   conf_mat(truth = species, estimate = .pred_class) %>%   autoplot() %>%   ggplot2::ggsave(     filename = \"plots/confusion_matrix.png\",     plot = .,     width = 8,     height = 6   )  # Save metrics with DVC metrics %>%   write_csv_dvc(     \"metrics/model_metrics.csv\",     message = \"Add model evaluation metrics\",     stage_name = \"evaluate_model\",     deps = c(       \"models/rf_model.rds\",       \"data/processed/test.csv\"     ),     metrics = TRUE   )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"creating-a-decision-tree","dir":"Articles","previous_headings":"","what":"Creating a Decision Tree","title":"End-to-End Example with Iris Dataset","text":"Let’s track analysis decisions:","code":"# Initialize decision tree decision_file <- initialize_decision_tree(   analysis_id = \"iris_classification\",   analyst = \"Data Scientist\",   description = \"Classification of iris species using random forest\" )  # Record data processing decision record_decision(   decision_file,   check = \"Data preprocessing\",   observation = \"All features are on different scales\",   decision = \"Scale all numeric features\",   reasoning = \"Random forest performance can be affected by feature scales\",   evidence = \"data/processed/train.csv\" )  # Record model selection decision record_decision(   decision_file,   check = \"Model selection\",   observation = \"Non-linear relationships between features\",   decision = \"Use random forest classifier\",   reasoning = \"RF can capture non-linear relationships and feature interactions\",   evidence = \"models/rf_model.rds\" )  # Create reports directory if it doesn't exist dir.create(\"reports\", showWarnings = FALSE)  # Export decision tree export_decision_tree(   decision_file,   format = \"html\",   output_path = \"reports/decisions.html\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"reproducible-pipeline","dir":"Articles","previous_headings":"","what":"Reproducible Pipeline","title":"End-to-End Example with Iris Dataset","text":"complete DVC pipeline now includes: 1. Data preparation stage 2. Model training stage 3. Model evaluation stage can reproduce entire analysis :","code":"system2(\"dvc\", \"repro\")"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"sharing-results","dir":"Articles","previous_headings":"","what":"Sharing Results","title":"End-to-End Example with Iris Dataset","text":"share work collaborators: Push code changes Git: Push data models DVC remote:","code":"git add . git commit -m \"Complete iris analysis\" git push dvc push"},{"path":"https://sebrauschert.github.io/thoth/articles/end-to-end-example.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"End-to-End Example with Iris Dataset","text":"example demonstrated : - Set complete analytics project thoth - Version data models DVC - Create reproducible pipelines - Track analysis decisions - Share results collaborators resulting project structure :","code":"iris_analysis/ ├── data/ │   ├── raw/ │   │   └── iris.csv │   └── processed/ │       ├── train.csv │       └── test.csv ├── models/ │   └── rf_model.rds ├── metrics/ │   └── model_metrics.csv ├── plots/ │   └── confusion_matrix.png ├── reports/ │   └── decisions.html ├── .dvc/ └── .git/"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with thoth","text":"thoth comprehensive framework setting reproducible analytics projects R. integrates several best practices tools: Data version control DVC (R functions) Containerization Docker Dependency management renv Customizable reporting Quarto guide help get started basic features thoth.","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with thoth","text":"can install development version thoth GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"sebrauschert/thoth\")"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"prerequisites","dir":"Articles","previous_headings":"Installation","what":"Prerequisites","title":"Getting Started with thoth","text":"using thoth, ensure : DVC installed Docker installed R (>= 4.1.0) Quarto report generation","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"creating-a-new-project","dir":"Articles","previous_headings":"","what":"Creating a New Project","title":"Getting Started with thoth","text":"Create new analytics project necessary setup: sets standardized project structure:","code":"library(thoth) library(tidyverse)  # Create a new project with all features enabled create_analytics_project(   \"my_project\",   use_dvc = TRUE,   use_docker = TRUE,   use_quarto = TRUE ) my_project/ ├── .dvc/               # DVC configuration ├── .git/               # Git version control ├── .gitignore         # Git ignore patterns ├── .Rproj.user/      # RStudio project files ├── data/              │   ├── raw/          # Raw data (tracked by DVC) │   └── processed/    # Processed data (tracked by DVC) ├── R/                # R scripts ├── reports/          # Quarto reports ├── docker/           # Dockerfile and related files ├── renv/             # renv library and lockfile └── README.md         # Project documentation"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"data-version-control-with-thoth","dir":"Articles","previous_headings":"","what":"Data Version Control with thoth","title":"Getting Started with thoth","text":"thoth provides seamless integration DVC tidyverse-style functions. ’s use data science workflow:","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"reading-and-processing-data","dir":"Articles","previous_headings":"Data Version Control with thoth","what":"Reading and Processing Data","title":"Getting Started with thoth","text":"","code":"# Example data processing pipeline raw_data <- read_csv(\"data/raw/dataset.csv\")  processed_data <- raw_data |>   mutate(     date = as.Date(date),     value = as.numeric(value)   ) |>   filter(!is.na(value)) |>   # Save processed data with DVC tracking   write_csv_dvc(     \"data/processed/cleaned_data.csv\",     \"Cleaned and processed raw data\"   )  # Continue with analysis summary_stats <- processed_data |>   group_by(category) |>   summarise(     mean_value = mean(value),     sd_value = sd(value)   ) |>   # Save summary statistics with DVC tracking   write_csv_dvc(     \"data/processed/summary_stats.csv\",     \"Generated summary statistics\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"tracking-models-and-r-objects","dir":"Articles","previous_headings":"Data Version Control with thoth","what":"Tracking Models and R Objects","title":"Getting Started with thoth","text":"","code":"# Train a model model <- lm(value ~ date + category, data = processed_data)  # Save model with DVC tracking model |>   write_rds_dvc(     \"models/linear_model.rds\",     \"Trained linear regression model\"   )  # Make predictions and save results predictions <- model |>   predict(newdata = new_data) |>   as_tibble() |>   write_csv_dvc(     \"results/model_predictions.csv\",     \"Generated model predictions\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"best-practices-for-data-organization","dir":"Articles","previous_headings":"Data Version Control with thoth","what":"Best Practices for Data Organization","title":"Getting Started with thoth","text":"","code":"# Raw data pipeline raw_survey_data |>   write_csv_dvc(     \"data/raw/survey_2024.csv\",     \"Added raw survey data for 2024\"   )  # Processed data pipeline cleaned_survey_data |>   write_csv_dvc(     \"data/processed/survey_2024_clean.csv\",     \"Added cleaned survey data\"   ) |>   create_features() |>   write_csv_dvc(     \"data/processed/survey_2024_features.csv\",     \"Added feature engineered dataset\"   )  # Model pipeline final_model |>   write_rds_dvc(     \"models/survey_2024_model.rds\",     \"Final predictive model with accuracy: 0.92\"   )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"docker-integration","dir":"Articles","previous_headings":"","what":"Docker Integration","title":"Getting Started with thoth","text":"thoth sets Docker environment R, RStudio Server, necessary tools: Docker setup includes: - R RStudio Server - DVC data version control - system dependencies - Automatic package installation via renv","code":"# Build and start the container docker compose up -d  # Access RStudio Server at http://localhost:8787 # Username: rstudio # Password: rstudio"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"dependency-management","dir":"Articles","previous_headings":"","what":"Dependency Management","title":"Getting Started with thoth","text":"thoth uses renv dependency management:","code":"# Install a new package renv::install(\"tidymodels\")  # Update lockfile renv::snapshot()  # Restore project environment renv::restore()"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"quarto-reports","dir":"Articles","previous_headings":"","what":"Quarto Reports","title":"Getting Started with thoth","text":"Create beautiful reports custom templates:","code":"# Create a new template create_quarto_template(   \"company_template\",   primary_color = \"#0054AD\",   secondary_color = \"#00B4E0\",   logo_path = \"path/to/logo.png\" )  # Apply template to a report apply_template_to_report(   \"reports/analysis.qmd\",   \"company_template\" )"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Getting Started with thoth","text":"Data Organization Error Handling Documentation Document analysis steps reports Keep README.md date Add comments complex code Use descriptive commit messages Reproducibility Use Docker environment consistency Track dependencies renv Version control everything Write automated tests","code":"# Keep raw data separate raw_data |>   write_csv_dvc(     \"data/raw/experiment_data.csv\",     \"Raw experimental data\"   )  # Store processed data with clear naming processed_data |>   write_csv_dvc(     \"data/processed/experiment_cleaned.csv\",     \"Cleaned experimental data\"   )  # Save models with version info model |>   write_rds_dvc(     \"models/xgboost_v2.rds\",     \"XGBoost model v2 (accuracy: 0.92)\"   ) # Safe writing function safe_write <- function(data, path, message) {   tryCatch(     write_csv_dvc(data, path, message),     error = function(e) {       warning(\"Failed to save data: \", e$message)       NULL     }   ) }  # Using purrr::safely safe_write_dvc <- safely(write_csv_dvc) result <- safe_write_dvc(data, \"data/output.csv\", \"Saved output\")"},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with thoth","text":"Read DVC Integration Guide advanced usage Learn Docker Setup customizing environment Explore Custom Templates report styling Check function reference detailed documentation","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/getting-started.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting Help","title":"Getting Started with thoth","text":"encounter issues questions: Check package documentation File issues GitHub Read function documentation ?function_name","code":""},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Git Integration with thoth","text":"Version control essential reproducible analytics. Git commands can run directly terminal, thoth provides convenient R functions common Git operations. integration allows manage version control directly R scripts console.","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"checking-repository-status","dir":"Articles","previous_headings":"Basic Git Operations","what":"Checking Repository Status","title":"Git Integration with thoth","text":"Use git_status() see files modified:","code":"library(thoth)  # Check status (short format) git_status()  # Check status with full details git_status(short = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"staging-and-committing-changes","dir":"Articles","previous_headings":"Basic Git Operations","what":"Staging and Committing Changes","title":"Git Integration with thoth","text":"Add files staging area commit changes:","code":"# Stage specific files git_add(\"analysis.R\") git_add(c(\"data/processed/results.csv\", \"plots/figure1.png\"))  # Stage all modified files git_add(\".\", force = FALSE)  # Commit staged changes git_commit(\"Add initial analysis script\")  # Stage and commit in one step git_commit(\"Update results\", all = TRUE)"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"working-with-branches","dir":"Articles","previous_headings":"Branch Management","what":"Working with Branches","title":"Git Integration with thoth","text":"Create, switch, manage branches:","code":"# List all branches git_branch_list()  # Include remote branches git_branch_list(all = TRUE)  # Create a new branch git_branch(\"feature/new-analysis\")  # Switch to existing branch git_checkout(\"main\")  # Create and switch to new branch git_checkout(\"feature/bugfix\", create = TRUE)"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"syncing-with-remote-repository","dir":"Articles","previous_headings":"Remote Operations","what":"Syncing with Remote Repository","title":"Git Integration with thoth","text":"Push pull changes:","code":"# Pull latest changes git_pull()  # Pull from specific remote and branch git_pull(\"origin\", \"main\")  # Push changes git_push()  # Push to specific remote and branch git_push(\"origin\", \"feature/new-analysis\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"checking-commit-history","dir":"Articles","previous_headings":"Viewing History","what":"Checking Commit History","title":"Git Integration with thoth","text":"View repository history:","code":"# View recent commits git_log()  # View more commits git_log(n = 20)  # View detailed log git_log(oneline = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"integration-with-dvc","dir":"Articles","previous_headings":"","what":"Integration with DVC","title":"Git Integration with thoth","text":"Git functions thoth work seamlessly DVC tracking:","code":"# Add and track a data file with DVC dvc_add(\"data/raw/large_dataset.csv\")  # Stage the .dvc file git_add(\"data/raw/large_dataset.csv.dvc\")  # Commit the tracking file git_commit(\"Add large dataset tracking\")  # Push both Git changes and DVC data git_push() dvc_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Git Integration with thoth","text":"Regular Commits Make small, focused commits Write clear commit messages Use present tense commit messages Branch Management Create feature branches new work Keep main/master branch stable Delete merged feature branches Syncing Pull changes starting new work Push changes regularly Handle conflicts promptly Integration Analysis Workflow","code":"# Example workflow library(thoth)  # Start new feature git_checkout(\"feature/analysis\", create = TRUE)  # Do some work... process_data()  # Track changes git_add(\"R/analysis.R\") git_commit(\"Add data processing function\")  # Push changes git_push(\"origin\", \"feature/analysis\")"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"feature-development","dir":"Articles","previous_headings":"Common Patterns","what":"Feature Development","title":"Git Integration with thoth","text":"","code":"# Start new feature git_checkout(\"main\") git_pull() git_checkout(\"feature/new-analysis\", create = TRUE)  # Work on feature...  # Commit changes git_add(\".\") git_commit(\"Complete new analysis\")  # Push to remote git_push(\"origin\", \"feature/new-analysis\")"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"hotfix","dir":"Articles","previous_headings":"Common Patterns","what":"Hotfix","title":"Git Integration with thoth","text":"","code":"# Create hotfix branch git_checkout(\"main\") git_checkout(\"hotfix/bug-123\", create = TRUE)  # Fix bug...  # Commit and push git_add(\"R/bugfix.R\") git_commit(\"Fix calculation error\") git_push()"},{"path":"https://sebrauschert.github.io/thoth/articles/git-integration.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Git Integration with thoth","text":"Git integration thoth provides convenient way manage version control directly R. combining functions analysis workflow, can maintain clean traceable project history.","code":"library(thoth) library(thoth)"},{"path":"https://sebrauschert.github.io/thoth/articles/thoth.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to thoth","text":"thoth comprehensive framework setting reproducible analytics projects R.","code":"library(thoth) #> ✔ Welcome to thoth! The reproducible analytics framework #> ⚠ DVC is not installed. Some features will be limited. #>   Visit https://dvc.org/doc/install to install DVC for full functionality. #> ℹ Did you know? Thoth was the mediator in disputes between gods, especially between Set and Horus. #> * For help, see: https://sebrauschert.github.io/thoth/"},{"path":"https://sebrauschert.github.io/thoth/articles/thoth.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Introduction to thoth","text":"main function create new analytics project create_analytics_project(): creates structured project necessary components reproducible analytics.","code":"create_analytics_project(   \"my_analysis\",   use_dvc = TRUE,   use_docker = TRUE,   git_init = TRUE )"},{"path":"https://sebrauschert.github.io/thoth/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Rauschert. Author, maintainer.","code":""},{"path":"https://sebrauschert.github.io/thoth/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rauschert S (2025). thoth: Reproducible Analytics Framework Data Version Control. R package version 0.0.0.9000, https://sebrauschert.github.io/thoth/, https://github.com/sebrauschert/thoth.","code":"@Manual{,   title = {thoth: Reproducible Analytics Framework with Data Version Control},   author = {Sebastian Rauschert},   year = {2025},   note = {R package version 0.0.0.9000,     https://sebrauschert.github.io/thoth/},   url = {https://github.com/sebrauschert/thoth}, }"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Reproducible Analytics Framework with Data Version Control","text":"thoth comprehensive framework setting reproducible analytics projects R. integrates data version control (DVC), containerization (Docker), dependency management (renv), customizable reporting (Quarto) implement best practices project organization, workflow management, reproducible research.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System Requirements","title":"Reproducible Analytics Framework with Data Version Control","text":"package requires several external tools: Required data version control features Installation instructions Note: package work without DVC installed, creating mock .dvc files instead Required DVC Installation instructions Required containerization features Installation instructions","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reproducible Analytics Framework with Data Version Control","text":"can install development version thoth GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"sebrauschert/thoth\")"},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Reproducible Analytics Framework with Data Version Control","text":"Standardized project structures Version control initialization Dependency management setup Track large data files Create reproducible pipelines Track metrics plots Reproducible environments Package analyses distribution Customizable report templates Decision tracking Methods section generation","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Reproducible Analytics Framework with Data Version Control","text":"Install system requirements (DVC, Python, Docker) Install thoth: Create new project: Read vignettes:","code":"devtools::install_github(\"sebrauschert/thoth\") library(thoth) create_analytics_project(\"my_analysis\") browseVignettes(\"thoth\")"},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage Example","title":"Reproducible Analytics Framework with Data Version Control","text":"","code":"library(thoth)  # Create a new analytics project create_analytics_project(\"my_analysis\")  # Track data files with DVC dvc_track(\"data/raw/dataset.csv\")  # Write and track CSV files write_csv_dvc(mtcars, \"data/processed/mtcars.csv\")  # Write and track RDS files write_rds_dvc(model, \"models/random_forest.rds\")"},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Reproducible Analytics Framework with Data Version Control","text":"Package website Getting started guide DVC tracking guide Custom templates guide","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Reproducible Analytics Framework with Data Version Control","text":"Please see CONTRIBUTING.md guidelines contribute project.","code":""},{"path":"https://sebrauschert.github.io/thoth/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Reproducible Analytics Framework with Data Version Control","text":"project licensed MIT License - see LICENSE file details. Thoth icon Freepik","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Template to Report — apply_template_to_report","title":"Apply Template to Report — apply_template_to_report","text":"Applies custom template Quarto report","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Template to Report — apply_template_to_report","text":"","code":"apply_template_to_report(report_path, template_name)"},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Template to Report — apply_template_to_report","text":"report_path Character. Path Quarto report template_name Character. Name template apply","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Template to Report — apply_template_to_report","text":"Invisibly returns TRUE success","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/apply_template_to_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Template to Report — apply_template_to_report","text":"","code":"if (FALSE) { # \\dontrun{ apply_template_to_report(\"reports/analysis.qmd\", \"company_template\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/check_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DVC Installation — check_dvc","title":"Check DVC Installation — check_dvc","text":"Check DVC Installation","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DVC Installation — check_dvc","text":"","code":"check_dvc()"},{"path":"https://sebrauschert.github.io/thoth/reference/check_git.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Git Installation — check_git","title":"Check Git Installation — check_git","text":"Check Git Installation","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_git.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Git Installation — check_git","text":"","code":"check_git()"},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check System Requirements — check_system_requirements","title":"Check System Requirements — check_system_requirements","text":"Check System Requirements","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check System Requirements — check_system_requirements","text":"","code":"check_system_requirements(use_dvc, use_docker)"},{"path":"https://sebrauschert.github.io/thoth/reference/check_system_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check System Requirements — check_system_requirements","text":"use_dvc Logical. Whether DVC required use_docker Logical. Whether Docker required","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a confusion matrix — conf_mat","title":"Create a confusion matrix — conf_mat","text":"Create confusion matrix","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a confusion matrix — conf_mat","text":"","code":"conf_mat(data, truth, estimate, ...)"},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a confusion matrix — conf_mat","text":"data data frame containing columns specified truth estimate. truth column name containing true values. estimate column name containing predicted values. ... Additional arguments passed yardstick::conf_mat.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a confusion matrix — conf_mat","text":"confusion matrix.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/conf_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a confusion matrix — conf_mat","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(mtcars) # Create a binary outcome mtcars <- mtcars %>%    mutate(vs_factor = factor(vs)) # Fit a model model <- glm(vs ~ mpg + cyl, data = mtcars, family = \"binomial\") # Make predictions preds <- predict(model, type = \"response\") # Create prediction data frame pred_data <- mtcars %>%   mutate(pred = factor(ifelse(preds > 0.5, 1, 0))) # Calculate confusion matrix conf_mat(pred_data, truth = vs_factor, estimate = pred) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Analytics Project — create_analytics_project","title":"Create a New Analytics Project — create_analytics_project","text":"Sets new analytics project standardized structure configuration reproducible analysis using DVC, Docker, renv, Quarto.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Analytics Project — create_analytics_project","text":"","code":"create_analytics_project(   path,   use_dvc = TRUE,   use_docker = TRUE,   use_renv = TRUE,   git_init = TRUE,   open = rlang::is_interactive() )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Analytics Project — create_analytics_project","text":"path Character. path project created. use_dvc Logical. Whether initialize DVC. Default TRUE. use_docker Logical. Whether set Docker configuration. Default TRUE. use_renv Logical. Whether initialize renv. Default TRUE. git_init Logical. Whether initialize git repository. Default TRUE. open Logical. Whether open new project RStudio. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Analytics Project — create_analytics_project","text":"Invisibly returns path created project.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_analytics_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Analytics Project — create_analytics_project","text":"","code":"if (FALSE) { # \\dontrun{ create_analytics_project(\"my_analysis\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_custom_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Custom CSS for Quarto Template — create_custom_css","title":"Create Custom CSS for Quarto Template — create_custom_css","text":"Create Custom CSS Quarto Template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_custom_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Custom CSS for Quarto Template — create_custom_css","text":"","code":"create_custom_css(   primary_color = NULL,   secondary_color = NULL,   font_family = NULL )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Custom Quarto Template — create_quarto_template","title":"Create Custom Quarto Template — create_quarto_template","text":"Creates custom Quarto template specified branding options","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Custom Quarto Template — create_quarto_template","text":"","code":"create_quarto_template(   template_name,   logo_path = NULL,   primary_color = NULL,   secondary_color = NULL,   font_family = NULL,   output_dir = \"reports/templates\" )"},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Custom Quarto Template — create_quarto_template","text":"template_name Character. Name template logo_path Character. Path logo file (optional) primary_color Character. Primary brand color hex format (optional) secondary_color Character. Secondary brand color hex format (optional) font_family Character. Main font family use (optional) output_dir Character. Directory save template (optional)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Custom Quarto Template — create_quarto_template","text":"Invisibly returns path created template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_quarto_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Custom Quarto Template — create_quarto_template","text":"","code":"if (FALSE) { # \\dontrun{ create_quarto_template(   template_name = \"company_template\",   logo_path = \"path/to/logo.png\",   primary_color = \"#FF0000\" ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/create_template_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Template YAML Configuration — create_template_yaml","title":"Create Template YAML Configuration — create_template_yaml","text":"Create Template YAML Configuration","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/create_template_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Template YAML Configuration — create_template_yaml","text":"","code":"create_template_yaml(template_name, logo_path = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/decision_tracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision Tracking Functions — decision_tracking","title":"Decision Tracking Functions — decision_tracking","text":"Functions tracking documenting human decisions analyses","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Track Files with DVC — dvc_add","title":"Track Files with DVC — dvc_add","text":"Track Files DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track Files with DVC — dvc_add","text":"","code":"dvc_add(path, message = NULL, recursive = FALSE, git_add = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track Files with DVC — dvc_add","text":"path Character vector file paths track message Optional commit message DVC recursive Logical. Whether recursively add directories. Default FALSE. git_add Logical. Whether automatically add .dvc files git. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track Files with DVC — dvc_add","text":"Invisibly returns tracked paths","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Commit Changes to DVC — dvc_commit","title":"Commit Changes to DVC — dvc_commit","text":"Commit Changes DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commit Changes to DVC — dvc_commit","text":"","code":"dvc_commit(path, message)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commit Changes to DVC — dvc_commit","text":"path Character vector file paths commit message Commit message","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commit Changes to DVC — dvc_commit","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull Data from DVC Remote — dvc_pull","title":"Pull Data from DVC Remote — dvc_pull","text":"Pull Data DVC Remote","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull Data from DVC Remote — dvc_pull","text":"","code":"dvc_pull(path = NULL, remote = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull Data from DVC Remote — dvc_pull","text":"path Optional character vector specific paths pull remote Optional name remote pull ","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull Data from DVC Remote — dvc_pull","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push Data to DVC Remote — dvc_push","title":"Push Data to DVC Remote — dvc_push","text":"Push Data DVC Remote","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push Data to DVC Remote — dvc_push","text":"","code":"dvc_push(path = NULL, remote = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push Data to DVC Remote — dvc_push","text":"path Optional character vector specific paths push remote Optional name remote push ","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push Data to DVC Remote — dvc_push","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a DVC Pipeline Stage — dvc_stage","title":"Create a DVC Pipeline Stage — dvc_stage","text":"Create DVC Pipeline Stage Create DVC Stage","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a DVC Pipeline Stage — dvc_stage","text":"","code":"dvc_stage(   name,   cmd,   deps = NULL,   outs = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   always_changed = FALSE )  dvc_stage(   name,   cmd,   deps = NULL,   outs = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   always_changed = FALSE )"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a DVC Pipeline Stage — dvc_stage","text":"name Stage name cmd Command execute deps Dependencies outs Outputs metrics Logical character vector indicating whether track metrics plots Logical character vector indicating whether track plots params Named list parameters always_changed Logical indicating whether stage always re-run","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_stage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a DVC Pipeline Stage — dvc_stage","text":"Invisibly returns TRUE successful Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Track files with DVC after writing — dvc_track","title":"Track files with DVC after writing — dvc_track","text":"function adds DVC tracking files written using tidyverse write functions. designed used pipe chain write operations.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track files with DVC after writing — dvc_track","text":"","code":"dvc_track(path, message = NULL, push = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track files with DVC after writing — dvc_track","text":"path path file written message optional commit message DVC push Logical. Whether push changes Git remote (default: FALSE)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track files with DVC after writing — dvc_track","text":"input path (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/dvc_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Track files with DVC after writing — dvc_track","text":"","code":"if (FALSE) { # \\dontrun{ data |>   readr::write_csv(\"data/processed/mydata.csv\") |>   dvc_track(\"Updated processed data\", push = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Analytics Project Data — example_projects","title":"Example Analytics Project Data — example_projects","text":"dataset containing example analytics project metrics demonstration purposes. dataset includes project characteristics performance metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Analytics Project Data — example_projects","text":"","code":"example_projects"},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Analytics Project Data — example_projects","text":"data frame 100 rows 6 variables: project_id Unique identifier project start_date Project start date team_size Number team members uses_dvc Whether project uses DVC (logical) uses_docker Whether project uses Docker (logical) completion_rate Project completion rate (0-100)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/example_projects.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Analytics Project Data — example_projects","text":"Generated demonstration purposes","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Decision Tree to Various Formats — export_decision_tree","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"Export Decision Tree Various Formats","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"","code":"export_decision_tree(file_path, format = \"md\", output_path = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"file_path Path decision tree YAML file format Output format (\"html\", \"pdf\", \"md\") output_path Path save output file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/export_decision_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Decision Tree to Various Formats — export_decision_tree","text":"Invisibly returns path exported file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Methods Section from Decision Tree — generate_methods_section","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"Generate Methods Section Decision Tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"","code":"generate_methods_section(file_path, format = \"markdown\")"},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"file_path Path decision tree YAML file format Output format (\"markdown\" \"text\")","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/generate_methods_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Methods Section from Decision Tree — generate_methods_section","text":"Character string containing methods section","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Files to Git — git_add","title":"Add Files to Git — git_add","text":"Adds files Git staging area.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Files to Git — git_add","text":"","code":"git_add(paths, force = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Files to Git — git_add","text":"paths Character vector file paths add force Logical. Whether force add ignored files. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Files to Git — git_add","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Files to Git — git_add","text":"","code":"if (FALSE) { # \\dontrun{ git_add(\"README.md\") git_add(c(\"data/raw/iris.csv\", \"data/processed/features.csv\")) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Git Branch — git_branch","title":"Create a New Git Branch — git_branch","text":"Creates new branch optionally switches .","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Git Branch — git_branch","text":"","code":"git_branch(branch_name, checkout = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Git Branch — git_branch","text":"branch_name Name new branch checkout Logical. Whether checkout new branch. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Git Branch — git_branch","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Git Branch — git_branch","text":"","code":"if (FALSE) { # \\dontrun{ git_branch(\"feature/new-analysis\") git_branch(\"hotfix/bug-123\", checkout = FALSE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List Git Branches — git_branch_list","title":"List Git Branches — git_branch_list","text":"Shows list branches repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Git Branches — git_branch_list","text":"","code":"git_branch_list(all = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Git Branches — git_branch_list","text":"Logical. Whether show branches (including remotes). Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Git Branches — git_branch_list","text":"Character vector branch names","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_branch_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Git Branches — git_branch_list","text":"","code":"if (FALSE) { # \\dontrun{ git_branch_list() git_branch_list(all = TRUE)  # include remote branches } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkout a Git Branch — git_checkout","title":"Checkout a Git Branch — git_checkout","text":"Switches specified branch, optionally creating exist.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkout a Git Branch — git_checkout","text":"","code":"git_checkout(branch_name, create = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkout a Git Branch — git_checkout","text":"branch_name Name branch checkout create Logical. Whether create branch exist. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkout a Git Branch — git_checkout","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_checkout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkout a Git Branch — git_checkout","text":"","code":"if (FALSE) { # \\dontrun{ git_checkout(\"main\") git_checkout(\"feature/new-analysis\", create = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Commit Changes to Git — git_commit","title":"Commit Changes to Git — git_commit","text":"Records changes repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commit Changes to Git — git_commit","text":"","code":"git_commit(message, all = FALSE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commit Changes to Git — git_commit","text":"message Commit message Logical. Whether automatically stage modified deleted files. Default FALSE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commit Changes to Git — git_commit","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commit Changes to Git — git_commit","text":"","code":"if (FALSE) { # \\dontrun{ git_commit(\"Add analysis script\") git_commit(\"Update results\", all = TRUE) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git Log — git_log","title":"Get Git Log — git_log","text":"Shows commit logs.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git Log — git_log","text":"","code":"git_log(n = 10, oneline = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git Log — git_log","text":"n Number commits show. Default 10. oneline Logical. Whether show commit one line. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git Log — git_log","text":"Character vector containing log output","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git Log — git_log","text":"","code":"if (FALSE) { # \\dontrun{ git_log() git_log(n = 20, oneline = FALSE)  # detailed log } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull Changes from Git Remote — git_pull","title":"Pull Changes from Git Remote — git_pull","text":"Fetches changes remote repository integrates current branch.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull Changes from Git Remote — git_pull","text":"","code":"git_pull(remote = NULL, branch = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull Changes from Git Remote — git_pull","text":"remote Name remote. Default NULL (uses default remote). branch Name branch. Default NULL (uses current branch).","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull Changes from Git Remote — git_pull","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull Changes from Git Remote — git_pull","text":"","code":"if (FALSE) { # \\dontrun{ git_pull() git_pull(\"origin\", \"main\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push Changes to Git Remote — git_push","title":"Push Changes to Git Remote — git_push","text":"Uploads local branch commits remote repository.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push Changes to Git Remote — git_push","text":"","code":"git_push(remote = NULL, branch = NULL)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push Changes to Git Remote — git_push","text":"remote Name remote. Default NULL (uses default remote). branch Name branch. Default NULL (uses current branch).","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push Changes to Git Remote — git_push","text":"Invisibly returns TRUE successful","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_push.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push Changes to Git Remote — git_push","text":"","code":"if (FALSE) { # \\dontrun{ git_push() git_push(\"origin\", \"feature/new-analysis\") } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git Status — git_status","title":"Get Git Status — git_status","text":"Shows working tree status, indicating files modified, added, deleted, untracked.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git Status — git_status","text":"","code":"git_status(short = TRUE)"},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git Status — git_status","text":"short Logical. Whether show status short format. Default TRUE.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git Status — git_status","text":"Character vector containing status output","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/git_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git Status — git_status","text":"","code":"if (FALSE) { # \\dontrun{ git_status() git_status(short = FALSE)  # detailed output } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Decision Tree — initialize_decision_tree","title":"Initialize a Decision Tree — initialize_decision_tree","text":"Initialize Decision Tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Decision Tree — initialize_decision_tree","text":"","code":"initialize_decision_tree(analysis_id, analyst, description, path = \"decisions\")"},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Decision Tree — initialize_decision_tree","text":"analysis_id Character string identifying analysis analyst Character string analyst name description Character string describing analysis path Character string specifying save decision tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/initialize_decision_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Decision Tree — initialize_decision_tree","text":"Invisibly returns path created decision tree file","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate model performance metrics — metrics","title":"Calculate model performance metrics — metrics","text":"Calculate model performance metrics","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate model performance metrics — metrics","text":"","code":"metrics(data, truth, estimate, event_level = NULL, ...)"},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate model performance metrics — metrics","text":"data data frame containing columns specified truth estimate. truth column name containing true values. estimate column name containing predicted values. event_level character string indicating level outcome considered \"event\". ... Additional arguments passed yardstick::metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate model performance metrics — metrics","text":"tibble model performance metrics.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate model performance metrics — metrics","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(mtcars) # Create a binary outcome mtcars <- mtcars %>%    mutate(vs_factor = factor(vs)) # Fit a model model <- glm(vs ~ mpg + cyl, data = mtcars, family = \"binomial\") # Make predictions preds <- predict(model, type = \"response\") # Create prediction data frame pred_data <- mtcars %>%   mutate(pred = factor(ifelse(preds > 0.5, 1, 0))) # Calculate metrics metrics(pred_data, truth = vs_factor, estimate = pred) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sebrauschert.github.io/thoth/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result applying rhs lhs","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":null,"dir":"Reference","previous_headings":"","what":"Record a Decision — record_decision","title":"Record a Decision — record_decision","text":"Record Decision","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record a Decision — record_decision","text":"","code":"record_decision(   file_path,   check,   observation,   decision,   reasoning,   evidence = NULL )"},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record a Decision — record_decision","text":"file_path Path decision tree YAML file check Character string describing checked observation Character string describing observed decision Character string describing decision made reasoning Character string explaining reasoning evidence Character string pointing supporting evidence (e.g., plot path)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/record_decision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record a Decision — record_decision","text":"Invisibly returns updated decision tree","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Docker Configuration — setup_docker","title":"Set up Docker Configuration — setup_docker","text":"Set Docker Configuration","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Docker Configuration — setup_docker","text":"","code":"setup_docker()"},{"path":"https://sebrauschert.github.io/thoth/reference/setup_dvc_tracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up DVC Tracking — setup_dvc_tracking","title":"Set up DVC Tracking — setup_dvc_tracking","text":"Set DVC Tracking","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_dvc_tracking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up DVC Tracking — setup_dvc_tracking","text":"","code":"setup_dvc_tracking()"},{"path":"https://sebrauschert.github.io/thoth/reference/setup_quarto_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Quarto Template — setup_quarto_template","title":"Set up Quarto Template — setup_quarto_template","text":"Set Quarto Template","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/setup_quarto_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Quarto Template — setup_quarto_template","text":"","code":"setup_quarto_template()"},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":null,"dir":"Reference","previous_headings":"","what":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"comprehensive framework setting reproducible analytics projects integrated version control data using 'DVC' (Data Version Control), containerization using 'Docker', dependency management using 'renv', customizable reporting using 'Quarto'.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"key-features","dir":"Reference","previous_headings":"","what":"Key Features","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"Project organization structure Data version control DVC Containerization Docker Dependency management renv Customizable reporting Quarto","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"create_analytics_project: Create new analytics project dvc_track: Track files DVC write_csv_dvc: Write track CSV files write_rds_dvc: Write track RDS files","code":""},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/reference/thoth-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"thoth: Reproducible Analytics Framework with Data Version Control — thoth-package","text":"Maintainer: Sebastian Rauschert seb.rauschert@gmail.com","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/version_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Version Control Functions — version_control","title":"Version Control Functions — version_control","text":"Functions interacting DVC Git R","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a CSV file and track it with DVC — write_csv_dvc","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"Write CSV file track DVC","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"","code":"write_csv_dvc(   x,   path,   message,   stage_name = NULL,   deps = NULL,   params = NULL,   metrics = FALSE,   push = FALSE )"},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"x data frame write CSV path Path save CSV file message Git commit message stage_name Optional DVC stage name deps Optional vector dependency files params Optional list parameters metrics Logical, whether track DVC metrics (default: FALSE) push Logical, whether push changes Git remote (default: FALSE)","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"input data frame (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_csv_dvc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a CSV file and track it with DVC — write_csv_dvc","text":"","code":"if (FALSE) { # \\dontrun{ # Simple tracking data |> write_csv_dvc(   \"data/processed/results.csv\",   message = \"Add processed results\",   push = TRUE )  # As part of a pipeline data |> write_csv_dvc(   \"data/processed/features.csv\",   message = \"Add feature matrix\",   stage_name = \"feature_engineering\",   deps = \"data/raw/input.csv\",   params = list(n_components = 10),   push = TRUE ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/write_gitignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Default .gitignore File — write_gitignore","title":"Write Default .gitignore File — write_gitignore","text":"Write Default .gitignore File","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_gitignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Default .gitignore File — write_gitignore","text":"","code":"write_gitignore()"},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write RDS with DVC tracking — write_rds_dvc","title":"Write RDS with DVC tracking — write_rds_dvc","text":"wrapper around saveRDS automatically tracks output file DVC optionally creates DVC pipeline stage.","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write RDS with DVC tracking — write_rds_dvc","text":"","code":"write_rds_dvc(   object,   file,   message = NULL,   stage_name = NULL,   deps = NULL,   metrics = FALSE,   plots = FALSE,   params = NULL,   push = FALSE,   ... )"},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write RDS with DVC tracking — write_rds_dvc","text":"object Object save file Path write message Optional DVC commit message stage_name Optional name DVC stage. provided, creates pipeline stage. deps Character vector dependency files (optional, pipeline stages) metrics Logical. Whether mark output DVC metric plots Logical. Whether mark output DVC plot params Named list parameters stage (optional) push Logical. Whether push changes Git remote (default: FALSE) ... Additional arguments passed saveRDS","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write RDS with DVC tracking — write_rds_dvc","text":"input object (invisibly) allow piping","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_rds_dvc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write RDS with DVC tracking — write_rds_dvc","text":"","code":"if (FALSE) { # \\dontrun{ # Simple tracking model |> write_rds_dvc(   \"models/model.rds\",   message = \"Updated model\",   push = TRUE )  # As part of a pipeline model |> write_rds_dvc(   \"models/rf_model.rds\",   message = \"Save trained random forest model\",   stage_name = \"train_model\",   deps = c(\"data/processed/training.csv\", \"R/train_model.R\"),   params = list(ntree = 500),   push = TRUE ) } # }"},{"path":"https://sebrauschert.github.io/thoth/reference/write_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Project README — write_readme","title":"Write Project README — write_readme","text":"Write Project README","code":""},{"path":"https://sebrauschert.github.io/thoth/reference/write_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Project README — write_readme","text":"","code":"write_readme(project_name)"},{"path":[]},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"new-features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"thoth 0.0.0.9000","text":"dvc_track() tracking files writing write_csv_dvc() writing tracking CSV files write_rds_dvc() writing tracking RDS files Added comprehensive test suite DVC tracking functions Added vignette demonstrating DVC tracking functionality","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"documentation-improvements-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Documentation improvements","title":"thoth 0.0.0.9000","text":"Updated pkgdown site DVC tracking documentation Added examples DVC tracking functions Improved function documentation detailed descriptions","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"bug-fixes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"thoth 0.0.0.9000","text":"None (initial release)","code":""},{"path":"https://sebrauschert.github.io/thoth/news/index.html","id":"initial-development-version-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Initial development version","title":"thoth 0.0.0.9000","text":"Added core functionality creating reproducible analytics projects Implemented data version control DVC integration Added Git integration version control Implemented Docker containerization Added dependency management renv Implemented decision tracking functionality Added customizable reporting Quarto Added metrics functions model evaluation","code":""}]
